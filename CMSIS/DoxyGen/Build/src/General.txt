/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\mainpage

<b>CMSIS-Build</b> is a set of command-line tools that enables Continuous Integration (CI) workflows for CMSIS-Pack based
software projects. It is available for Windows and Linux.

The CMSIS-Build flow is displayed on the figure below:

\image html cmsis_build_flow.png

- [Optional] Setup your CMSIS-Pack repository if you have not done so already.
- [Optional] Convert your project file format to *.cpdsc.
- Run the build script that
  - installs all packs
  - merges configuration files
  - generates \c make files
  - and creates the binary image

The following sections provide more information:

- \subpage build_revisionHistory
- \subpage build_bashenvsetup runs through the installation and setup of the tools.
- \subpage build_optheory explains the technical details of CMSIS-Build.
- \subpage build_runbuild shows usage details.
- \subpage build_examples provides example projects that can be used to setup and test the flow.

<hr>
CMSIS-Build in ARM::CMSIS Pack
-----------------------------
Files relevant to CMSIS-Build are present in the following \b ARM::CMSIS directories:
|Folder            |Content                                       | 
|------------------|----------------------------------------------|
|\b CMSIS\\Documentation\\Build | <b>This documentation </b>  |
|\b CMSIS\\Utilities\\Windows   | <b>CMSIS-Build utilities for Windows platform </b>   |
|\b CMSIS\\Utilities\\Linux     | <b>CMSIS-Build utilities for Linux platform</b>     |
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_revisionHistory Revision history

<table class="cmtable" summary="Revision History">
  <tr>
    <td>0.10</td>
    <td>Release for beta review</td>
  </tr>
</table>
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_bashenvsetup  Bash environment setup

CMSIS-Build requires a Bash environment on your PC. For Windows PCs, install for example
<a href="https://gitforwindows.org/" target="_blank">git for Windows</a> which includes the MINGW64 Bash environment.

Installation
------------

- Download the installer from <a href="">cbuild_install.sh</a>.
- Open a Bash terminal and run the installer: <pre>$ ./cbuild_install.sh</pre>
- You will be asked to provide:
  - An installation directory. 
  - Your CMSIS-Pack root directory.
  - A directory to store the compiler setup files.
  - The path to the Arm Compiler 6 installation.
  - The path to the Arm Compiler 5 installation.
- After the installation source the setup file from &lt;installation_path&gt;/etc/setup.

Manual setup
------------

For its correct operation CMSIS-Build needs to be provided with some configuration parameters:

 - \ref cmsis_build_setup_file "Paths configuration" 
 - \ref cmsis_build_compiler_config "Toolchain configuration files"

\anchor cmsis_build_setup_file
Paths configuration
--------------

CMSIS-Build requires following environment variables to be present in the User environment variables:

 - \b CMSIS_PACK_ROOT - path to the installation folder of CMSIS-Packs.
 - \b CMSIS_COMPILER_ROOT - optional. Use tbd.
 - \b CMSIS_BUILD_ROOT - CMSIS-Build installation directory.

To simplify the configuration there is a special \b setup script file in CMSIS-Build installation directory (for example, in
Windows\\x64\\Debug\\etc\) folder that defines corresponding environment variables. 

Note that this script creates variables only for the duration of the bash session and not permanently:

\code
############### EDIT BELOW ###############

export CMSIS_PACK_ROOT="/$(echo $APPDATA | sed -e 's/\\/\//g' -e 's/://g')/Arm/CMSIS-Packs"
export CMSIS_COMPILER_ROOT="/$(echo $APPDATA | sed -e 's/\\/\//g' -e 's/://g')/CMSIS-Compilers"

############ DO NOT EDIT BELOW ###########
...
\endcode

It can be modified for a particular project and executed from the bash console before using the CMSIS-Build utility. 

\anchor cmsis_build_compiler_config 
Toolchain configuration files
--------------

CMSIS-Build relies on toolchain-specific configuration .mak files that define the path to the toolchain and do the mapping
of the toolchain-specific options to the toolchain-independent options of CMSIS-Build.

The .mak file has a following naming format:
<b>\<toolchain\>.\<version\>.mak </b>

For example: \c ARMCC.5.6.6.750.mak, \c ARMCLANG.6.13.0.mak

The target toolchain is specified in project *.cpdsc file. CMSIS-Build (cbuildgen.exe utility) first tries to find the
corresponding .mak file for the toolchain in the project root folder and if not found searches CMSIS_BUILD_ROOT directory
for it.

\todo Reference to description of CMSIS-Build options.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_optheory Theory of operation

This page explains the technical details about the CMSIS-Build flow. The following image shows the steps with their
correlated scripts/tools:

\image html cmsis_build_flow_detail.png


\section build_optheory_1 Setup the CMSIS-Pack repository

\image html cpreaterepo_sh.png

If you have not done already, you start by setting up a CMSIS-Pack repository. The \ref build_cpcreatereposh sets up a new
repository at the given location. Use this to start your CMSIS-Build run from a scratch.

The repository will be used to \ref build_optheory_3_2


\section build_optheory_2 Convert project format

If you have created your project with µVision, the \ref build_cbuild_uvprojxsh project allows you to convert the original
µVision uvprojx format into the cpdsc format:

\image html cbuild_uvprojx_sh.png

\note You can write cpdsc files also by hand. Refer to the \ref build_examples section for more information.


\section build_optheory_3 Run the build script

The \ref build_cbuildsh covers all the steps that are required to create the binary file (either an executable or a library
object).


\subsection build_optheory_3_1 Create list of missing packs

Run the \ref build_cbuildgen utility in config mode to scan the *.cpdsc file for all packs that are used in the project.
The utility creates a list of all included packs.

\image html cbuildgen_config.png


\subsection build_optheory_3_2 Install missing packs

The \ref build_cpinstall reads the list of required packs, checks the CMSIS-Pack repository for their availability and
starts to download the missing packs into the repository.

\image html cpinstall_sh.png


\subsection build_optheory_3_3 Generate make files

Run the \ref build_cbuildgen utility in make mode to create make files. The utility create two make files:
- The \c project_cfg.mak contains a list of all configuration files that are coming from software components from the
  CMSIS-Packs.
- The \c project.mak file is the make file that is used to create the binary.

\image html cbuildgen_make.png


\subsection build_optheory_3_4 Merge configuration files

Berfore the actual build step, the configuration files from the software components need to be merged. make uses the
\ref build_ccmerge utility to merge the configuration files from the pack repository with the ones that the user has already
been working on in the project.

\note This step only works for configuration files that are using
<a href="../../Pack/html/configWizard.html" target="_blank">Configuration Wizard Annotations</a>.

\image html make_cfg.png


\subsection build_optheory_3_5 Build target

Finally, make creates the binary image from all the sources that are required for a successful build. It uses the toolchain
information that is created in the \ref build_bashenvsetup step.

\image html make.png
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_runbuild Scripts and utilities

This page explains the usage details of the scripts and utilities in the CMSIS-Build flow.


\section build_cpcreatereposh cpcreaterepo.sh script

The \c cpcreaterepo.sh script allows you to setup a new pack repository for the build run.

Below is a sample output (reduced).

\code
\endcode

<b>cpcreaterepo.sh Bash script template file</b>

The \b cpcreaterepo.sh script template allwos you to configure:
- item 1
- item 2
- item 3

\code
\endcode


\section build_cbuild_uvprojxsh cbuild_uvprojx.sh script

The \c cbuild_uvprojx.sh script allows you to convert your µVision project from the *.uvprojx format into the required
*.cpdsc format.

Below is a sample output (reduced).

\code
\endcode

<b>cbuild_uvprojx.sh Bash script template file</b>

The \b cbuild_uvprojx.sh script template allwos you to configure:
- item 1
- item 2
- item 3

\code
\endcode


\section build_cbuildsh cbuild.sh script

The \c cbuild.sh script allows you ...

Below is a sample output (reduced).

\code
\endcode

<b>cbuild.sh Bash script template file</b>

The \b cbuild.sh script template allwos you to configure:
- item 1
- item 2
- item 3

\code
\endcode


\subsection build_cbuildgen  cbuildgen utility

CMSIS-Build package contains cbuildgen utility that...

Operation
-----------------------------
The usage syntax is following:

\code
 cbuildgen <command> <ProjectFile>.cpdsc [options]
\endcode 

with the commands and options explained in the table below

<table class="cmtable" summary="cbuildgen Args">
  <tr>
    <th>\<commands></th>
    <th>Short Name           </th>
    <th>Description</th>
  </tr>
  <tr>
    <td>config</td>
    <td>Run in configuration mode</td>	
    <td>The tool checks whether CMSIS packs installed in \c CMSIS_PACK_ROOT directory and writes URLs of missing packs into
    \<ProjectFile\>_cfg.cpinstall file.</td>
  </tr>
  <tr>
    <td>make</td>
    <td>Run in make mode</td>	
    <td>The tool generates the makefile \<ProjectFile\>.mak that can be used by the \b make utility to build the firmware
    image.</td>
  </tr>
  <tr>
    <th>[options]</th>
	<th> </th>
    <th> </th>
  </tr>
  <tr>
    <td>\--merge=\<MergeTool></td>
    <td nowrap>Merge components configuration files</td>	
    <td>Requests to run the specified \<MergeTool> to merge the differences between the latest component configuration files
    in \c CMSIS_PACK_ROOT directory with the ones currently used in the project.
	</td>
  </tr>
</table>

Examples
-----------------------------
For example run the 

\code
 cbuildgen config MyProject.cpdsc
\endcode

\code
 cbuildgen make MyProject.cpdsc --merge=ccmerge
\endcode

where <b>ccmerge</b> is the \ref build_ccmerge for Windows platform provided with the CMSIS-Build package.
  
Invocation Errors
-----------------

<table class="cmtable" summary="cbuildgen Invocation Msgs">
  <tr>
    <th>Message Number</th>
    <th>Type</th>
    <th>Description</th>
    <th>Action</th>
  </tr>
<tr><td>M200</td> <td>ERROR</td> <td>Invalid arguments!</td>
  <td>At least one argument is wrong. Correct the argument.</td>
</tr>
<tr><td>M202</td> <td>ERROR</td> <td>No CPDSC input file was specified</td>
  <td>A *.cpdsc file is not provided as an argument. </td>
</tr>
<tr><td>M205</td> <td>ERROR</td> <td>tbd</td>
  <td>tbd</td>
</tr>
<tr><td>M206</td> <td>ERROR</td> <td>tbd</td>
  <td>tbd</td>
</tr>
<tr><td>M207</td> <td>ERROR</td> <td>Multiple commands were specified!</td>
  <td>More than one command was provided in arguments. Only one command shall be used. </td>
</tr>
</table>


\subsection build_cpinstall  cpinstall.sh script

The \c cpinstall.sh script allows you to install missing CMSIS-Packs that are listed in the *.cpdsc file into your
repository.

Below is a sample output (reduced).

\code
\endcode

<b>cpinstall.sh Bash script template file</b>

The \b cpinstall.sh script template allwos you to configure:
- item 1
- item 2
- item 3

\code
\endcode


\subsection build_ccmerge  ccmerge utility

CMSIS-Build package contains cbuildgen utility that...

Operation
-----------------------------
The usage syntax is following:

\code
 cbuildgen <command> <ProjectFile>.cpdsc [options]
\endcode 

with the commands and options explained in the table below

<table class="cmtable" summary="cbuildgen Args">
  <tr>
    <th>\<commands></th>
    <th>Short Name           </th>
    <th>Description</th>
  </tr>
  <tr>
    <td>config</td>
    <td>Run in configuration mode</td>	
    <td>The tool checks whether CMSIS packs installed in \c CMSIS_PACK_ROOT directory and writes URLs of missing packs into
    \<ProjectFile\>_cfg.cpinstall file.</td>
  </tr>
  <tr>
    <td>make</td>
    <td>Run in make mode</td>	
    <td>The tool generates the makefile \<ProjectFile\>.mak that can be used by the \b make utility to build the firmware
    image.</td
  </tr>
  <tr>
    <th>[options]</th>
	<th> </th>
    <th> </th>
  </tr>
  <tr>
    <td>\--merge=\<MergeTool></td>
    <td nowrap>Merge components configuration files</td>	
    <td>Requests to run the specified \<MergeTool> to merge the differences between the latest component configuration files
    in \c CMSIS_PACK_ROOT directory with the ones currently used in the project.
	</td>
  </tr>
</table>

Examples
-----------------------------
For example run the 

\code
 cbuildgen config MyProject.cpdsc
\endcode

\code
 cbuildgen make MyProject.cpdsc --merge=ccmerge
\endcode

where <b>ccmerge</b> is the \ref build_ccmerge for Windows platform provided with the CMSIS-Build package.
  
Invocation Errors
-----------------

<table class="cmtable" summary="cbuildgen Invocation Msgs">
  <tr>
    <th>Message Number</th>
    <th>Type</th>
    <th>Description</th>
    <th>Action</th>
  </tr>
<tr><td>M200</td> <td>ERROR</td> <td>Invalid arguments!</td>
  <td>At least one argument is wrong. Correct the argument.</td>
</tr>
<tr><td>M202</td> <td>ERROR</td> <td>No CPDSC input file was specified</td>
  <td>A *.cpdsc file is not provided as an argument. </td>
</tr>
<tr><td>M205</td> <td>ERROR</td> <td>tbd</td>
  <td>tbd</td>
</tr>
<tr><td>M206</td> <td>ERROR</td> <td>tbd</td>
  <td>tbd</td>
</tr>
<tr><td>M207</td> <td>ERROR</td> <td>Multiple commands were specified!</td>
  <td>More than one command was provided in arguments. Only one command shall be used. </td>
</tr>
</table>


\subsection build_make  make utility

CMSIS-Build package contains a make utility that...

Operation
-----------------------------
The usage syntax is following:

\code
 cbuildgen <command> <ProjectFile>.cpdsc [options]
\endcode 

with the commands and options explained in the table below

<table class="cmtable" summary="cbuildgen Args">
  <tr>
    <th>\<commands></th>
    <th>Short Name           </th>
    <th>Description</th>
  </tr>
  <tr>
    <td>config</td>
    <td>Run in configuration mode</td>	
    <td>The tool checks whether CMSIS packs installed in \c CMSIS_PACK_ROOT directory and writes URLs of missing packs into
    \<ProjectFile\>_cfg.cpinstall file.</td>
  </tr>
  <tr>
    <td>make</td>
    <td>Run in make mode</td>	
    <td>The tool generates the makefile \<ProjectFile\>.mak that can be used by the \b make utility to build the firmware
    image.</td
  </tr>
  <tr>
    <th>[options]</th>
	<th> </th>
    <th> </th>
  </tr>
  <tr>
    <td>\--merge=\<MergeTool></td>
    <td nowrap>Merge components configuration files</td>	
    <td>Requests to run the specified \<MergeTool> to merge the differences between the latest component configuration files
    in \c CMSIS_PACK_ROOT directory with the ones currently used in the project.
	</td>
  </tr>
</table>

Examples
-----------------------------
For example run the 

\code
 cbuildgen config MyProject.cpdsc
\endcode

\code
 cbuildgen make MyProject.cpdsc --merge=ccmerge
\endcode

where <b>ccmerge</b> is the \ref build_ccmerge for Windows platform provided with the CMSIS-Build package.
  
Invocation Errors
-----------------

<table class="cmtable" summary="cbuildgen Invocation Msgs">
  <tr>
    <th>Message Number</th>
    <th>Type</th>
    <th>Description</th>
    <th>Action</th>
  </tr>
<tr><td>M200</td> <td>ERROR</td> <td>Invalid arguments!</td>
  <td>At least one argument is wrong. Correct the argument.</td>
</tr>
<tr><td>M202</td> <td>ERROR</td> <td>No CPDSC input file was specified</td>
  <td>A *.cpdsc file is not provided as an argument. </td>
</tr>
<tr><td>M205</td> <td>ERROR</td> <td>tbd</td>
  <td>tbd</td>
</tr>
<tr><td>M206</td> <td>ERROR</td> <td>tbd</td>
  <td>tbd</td>
</tr>
<tr><td>M207</td> <td>ERROR</td> <td>Multiple commands were specified!</td>
  <td>More than one command was provided in arguments. Only one command shall be used. </td>
</tr>
</table>
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_examples  Examples

Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque
penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium
quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.
*/