/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\mainpage

<b>CMSIS-Build</b> is a set of command-line tools that enables Continuous Integration (CI) workflows for CMSIS-Pack based
software projects. It is available for Windows and Linux.

The CMSIS-Build flow is displayed on the figure below:

\msc
 a [label="", textcolor="black", linecolor="indigo", arclinecolor="indigo"];
 a rbox a [label="[Optional] Repository setup", linecolor="indigo", URL="\ref build_cpcreatereposh"];
 a rbox a [label="[Optional] Convert project format to *.cpdsc", linecolor="blue", URL="\ref build_cbuild_uvprojxsh"];
 a note a [label="Build script:", linecolor="green", URL="\ref build_cbuildsh"];
 a rbox a [label="Generate list of mising packs", linecolor="green", URL="\ref build_cbuildgen"];
 a rbox a [label="Install missing packs", linecolor="green", URL="\ref build_cpinstall"];
 a rbox a [label="Generate make files", linecolor="green", URL="\ref build_cbuildgen"];
 a rbox a [label="Merge configuration files", linecolor="green", URL="\ref build_ccmerge"];
 a rbox a [label="Build target", linecolor="green", URL="\ref build_make"];
 a box a  [label="Binary image available", linecolor="red"];
\endmsc

The following sections provide more information:

- \subpage build_revisionHistory
- \subpage build_bashenvsetup runs through the installation and setup of the tools.
- \subpage build_runbuild shows usage details.
- \subpage build_examples provides a test project that can be used to setup and test the flow.

<hr>
CMSIS-Build in ARM::CMSIS Pack
-----------------------------
Files relevant to CMSIS-Build are present in the following \b ARM::CMSIS directories:
|Folder                         |Content                                             | 
|-------------------------------|----------------------------------------------------|
|\b CMSIS\\Documentation\\Build | <b>This documentation </b>                         |
|\b CMSIS\\Utilities\\Windows   | <b>CMSIS-Build utilities for Windows platform </b> |
|\b CMSIS\\Utilities\\Linux     | <b>CMSIS-Build utilities for Linux platform</b>    |
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_revisionHistory Revision history

<table class="cmtable" summary="Revision History">
  <tr>
    <td>0.10</td>
    <td>Release for beta review</td>
  </tr>
</table>
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_bashenvsetup  Bash environment setup

CMSIS-Build requires a Bash environment on your PC. For Windows PCs, install for example
<a href="https://gitforwindows.org/" target="_blank">git for Windows</a> which includes the MINGW64 Bash environment.


\section build_bashenvsetup_install Installation

- Download the installer from <a href="">cbuild_install.sh</a>.
- Open a Bash terminal and run the installer: <pre>$ ./cbuild_install.sh</pre>
- You will be asked to provide:
  - An installation directory (\c &lt;installation_path&gt;).
  - Your CMSIS-Pack root directory.
  - A directory to store the compiler setup files.
  - The path to the Arm Compiler 6 installation.
  - The path to the Arm Compiler 5 installation.
- After the installation, source the file \c &lt;installation_path&gt;/etc/setup in your Bash console.


\section build_bashenvsetup_man_setup Manual setup

For its correct operation CMSIS-Build needs to be provided with some configuration parameters:

 - \ref cmsis_build_setup_file "Paths configuration" 
 - \ref cmsis_build_compiler_config "Toolchain configuration files"


\subsection cmsis_build_setup_file Configure paths

CMSIS-Build requires following environment variables to be present in the user environment variables:

| Variable               | Description                                    | Required |
|------------------------|------------------------------------------------|----------|
|\c $CMSIS_PACK_ROOT     | Path to the CMSIS-Packs repository             | Yes      |
|\c $CMSIS_COMPILER_ROOT | Path to the \ref cmsis_build_compiler_config   | Optional |
|\c $CMSIS_BUILD_ROOT    | Path to the CMSIS-Build installation directory | Yes      |

Use the \b setup script file in the CMSIS-Build installation directory (&lt;installation_path&gt;/etc/ folder) to change
these environment variables. 

\note Once sources, the variables are only valid for the current bash session.

\b Setup \b script

<pre>
############### EDIT BELOW ###############
 
export CMSIS_PACK_ROOT=/C/Users/johndoe/AppData/Local/Arm/Packs
export CMSIS_COMPILER_ROOT=/C/Users/johndoe/AppData/Local/Arm/Compilers
 
############ DO NOT EDIT BELOW ###########
...
</pre>

It can be modified for a particular project and sourced from the bash console before using the CMSIS-Build utility. 


\subsection cmsis_build_compiler_config Toolchain configuration files

CMSIS-Build relies on toolchain-specific configuration .mak files that define the path to the toolchain and do the mapping
of the toolchain-specific options to the toolchain-independent options of CMSIS-Build.

The .mak file has a following naming format:
<tt>&lt;toolchain\>.&lt;version\>.mak </tt>

For example: \c ARMCC.5.6.6.750.mak, \c ARMCLANG.6.13.0.mak

The target toolchain is specified in project *.cpdsc file. The \ref build_cbuildgen tries to find the corresponding .mak
file for the toolchain in the project root folder. If it is not present there, it searches the \c $CMSIS_BUILD_ROOT directory
for it.


\section build_helper Required helper files

The \ref build_cbuildsh checks the XML structure of the *.cpdsc file that is used in the build run. For that, it requires
<a href="http://xmlsoft.org/index.html" target="_blank">xmllint</a> to be installed. In Linux environments, this is already
available. If you use CMSIS-Build on a Windows PC, you have to add it manually.

- Go to the official <a href="https://www.zlatkovic.com/pub/libxml/" target="_blank">libxml Windows binaries</a>.
- Download the ZIP files for \c iconv, \c libxml, \c libxmlsec, and \c zlib.
- Extract the \c /bin directory of each of the ZIP files to a folder on your disk, for example \c C:\\xmllint.
- Add this folder to your
  <a href="https://answers.microsoft.com/en-us/windows/forum/windows_10-other_settings/adding-path-variable/97300613-20cb-4d85-8d0e-cc9d3549ba23" target="_blank"><tt>PATH</tt> variable</a>.

Now, the \ref build_cbuildsh will be able to find \c xmllint and run the schema check.

\note You need to restart the git Bash console to re-read the \c PATH variable.
*/

/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_runbuild Scripts and utilities

This page explains the usage details of the scripts and utilities provided as part of the CMSIS-Build installation.
All scripts provide a reference implementation for integrating the \ref build_cbuildgen "cbuildgen" tool for an end to end
CMSIS-Build flow.

\section build_cbuildgen  Build generator utility 'cbuildgen'

The CMSIS-Build generator utility \c cbuildgen is the core tool of CMSIS-Build. It processes the CMSIS-Pack Run-Time
Environment business logic and feeds the targeted build environment with required files and parameters:
- Device information (from the device family pack) and selected features relevant for the code generation.
- Tool-chain location. All available tool-chain configurations are located in \c $CMSIS_COMPILER_ROOT using the naming
  convention \c &lt;name>.&lt;version>.mak.
- Command line options for the selected tool-chain.
- File names and locations of source and header files to be included in the project build. Files are either located in the
  project folder structure or within the packs installed in the CMSIS-Pack directory specified by the environment variable
  \c $CMSIS_PACK_ROOT.
- Version information for all configuration files located in the project and the corresponding default configuration files
  located in the selected pack version.

The tool reads the the CMSIS-Pack Project Description file (\c &lt;ProjectFile>.cpdsc) passed as an argument. This
description lists all packs (and optionally the version range) or the exact version of the packs required by the project.
When invoking \c cbuildgen with the option \c config, it checks whether the packs installed in \c $CMSIS_PACK_ROOT satisfy
the requirements and writes a list of download URLs of missing packs to a file \c &lt;ProjectFile>.cpinstall.

\code
$ cbuildgen config MyProject.cpdsc
\endcode

If all required packs are installed, \c cbuildgen can be invoked to generate required files for the build environment. At
this point, \c makefile is the only supported build environment and the command to invoke \c cbuildgen is \c make.

\code
$ cbuildgen make MyProject.cpdsc
\endcode

The generated makefile is named &lt;ProjectFile>.mak. and includes two additional makefiles:
- include \c ${CMSIS_BUILD_ROOT}/etc/Whitespace.mak required for working around the lack of support for handling of white
  spaces in folders and filenames by the \c make tool.
- include \c ${CMSIS_COMPILER_ROOT}/&lt;name>.&lt;version>.mak

The basic invocation of the makefile is:
\code
$ make -f MyProject.mak
\endcode

Operation
-----------------------------
\b cbuildgen is invoked from the command line:

\code
 cbuildgen <command> <ProjectFile>.cpdsc [options]
\endcode 
<br>
<table class="cmtable" summary="cbuildgen Args">
  <tr>
    <th style="min-width:175px">&lt;command></th>
    <th style="min-width:175px">Short Name</th>
    <th style="min-width:175px">Description</th>
  </tr>
  <tr>
    <td>config</td>
    <td>Find missing packs.</td>	
    <td>The tool checks for missing packs. CMSIS packs are searched for in \c $CMSIS_PACK_ROOT directory. 
	Download URLs of missing packs are written to &lt;ProjectFile\>_cfg.cpinstall file.</td>
  </tr>
  <tr>
    <td>make</td>
    <td>Generate makefile</td>	
    <td>The tool generates the makefile &lt;ProjectFile\>.mak that can be used by the \c make utility to build the project binary.</td>
  </tr>
  <tr>
    <th>[option]</th>
	<th> </th>
    <th> </th>
  </tr>
  <tr>
    <td>\--merge=&lt;MergeTool></td>
    <td nowrap>Merge configuration files of components</td>
    <td>When invoked with option \c make, the makefile &lt;ProjectFile>_cfg.mak is generated. It invokes the specified &lt;MergeTool>
    for those configuration files with higher version in the selected component than present in the project folder, specified in 
    the &lt;ProjectFile>.cpdsc. Note that merging may result in errors. According to semantic versioning, major version
    changes indicate incompatible updates.
	</td>
  </tr>
</table>

Examples
-----------------------------
For example run: 

\code
 cbuildgen config MyProject.cpdsc
  
 cbuildgen make MyProject.cpdsc --merge=ccmerge
\endcode

where <b>ccmerge</b> is the \ref build_ccmerge for Windows platform provided with the CMSIS-Build package.
  
Invocation Errors
-----------------

<table class="cmtable" summary="cbuildgen invocation messages">
  <tr>
    <th>Message Number</th>
    <th>Type</th>
    <th>Description</th>
    <th>Action</th>
  </tr>
<tr><td>M200</td> <td>ERROR</td> <td>Invalid arguments!</td>
  <td>At least one argument is wrong. See usage and correct the argument.</td>
</tr>
<tr><td>M201</td> <td>ERROR</td> <td>Too many arguments!</td>
  <td>There is more arguments passed than allowed. See usage and correct the command line.</td>
<tr><td>M202</td> <td>ERROR</td> <td>No CPDSC input file was specified</td>
  <td>A *.cpdsc file is not provided as an argument. </td>
</tr>
<tr><td>M203</td> <td>ERROR</td> <td>Error reading file(s) ...!</td>
  <td>The listed file could not be read. Check file content.</td>
</tr>
<tr><td>M204</td> <td>ERROR</td> <td>File not found: ...!</td>
  <td>The listed file was not found.</td>
</tr>
<tr><td>M205</td> <td>ERROR</td> <td>$CMSIS_PACK_ROOT environment variable is not defined!</td>
  <td>The tool requires the environment variable $CMSIS_PACK_ROOT to locate the CMSIS Packs.</td>
</tr>
<tr><td>M206</td> <td>ERROR</td> <td>No command was specified!</td>
  <td>The tool requires a command. See usage information for available commands (e.g. config, make)</td>
</tr>
<tr><td>M207</td> <td>ERROR</td> <td>Multiple commands were specified!</td>
  <td>More than one command was provided in arguments. A single command is required.</td>
</tr>
<tr><td>M208</td> <td>ERROR</td> <td>Error copying file ...!</td>
  <td>The specified file could not be copied and will be missing during build.</td>
</tr>
</table>

RTE Model Errors
-----------------

<table class="cmtable" summary="cbuildgen RTE model messages">
  <tr>
    <th>Message Number</th>
    <th>Type</th>
    <th>Description</th>
    <th>Action</th>
  </tr>
<tr><td>M500</td> <td>ERROR</td> <td>RTE Model reports: <i>MSG</i></td>
  <td>Error while preparing data. See massage for more details.</td>
</tr>
<tr><td>M502</td> <td>ERROR</td> <td>RTE Model reports: <i>\#error NUM: NAME : MSG</i></td>
  <td>Additional software components required.</td>
</tr>
<tr><td>M504</td> <td>ERROR</td> <td>RTE Model reports: MISSING: – <i>SPACE NAME</i></td>
  <td>Add the missing component.</td>
</tr>
</table>

Generator Messages
-----------------

<table class="cmtable" summary="cbuildgen generator messages">
  <tr>
    <th>Message Number</th>
    <th>Type</th>
    <th>Description</th>
    <th>Action</th>
  </tr>
<tr><td>M600</td> <td>ERROR</td> <td>RTE Model reports: ...</td>
  <td>The CMSIS-Pack engine reports an error message.</td>
</tr>

<tr><td>M630</td> <td>WARNING</td> <td>Device ... is substituted by device variant ... .</td>
  <td>Instead of the device specified by the project a variant found for this device is used.</td>
</tr>
<tr><td>M650</td> <td>INFO</td> <td>Setup run successfully</td> <td> </td>For information only.</tr>
<tr><td>M651</td> <td>INFO</td> <td>Generated makefile for merging config files: ... </td> <td>For information only.</td> </tr>
<tr><td>M652</td> <td>INFO</td> <td>Generated makefile for project build:'%NAME%.mak'</td> <td>For information only.</td> </tr>
<tr><td>M653</td> <td>INFO</td> <td>Local config file ... was not found. Copying default file from package.</td> 
    <td>Please validate whether the config file is intentionally missing. The default config file may be missing project specific settings.</td> 
</tr>
<tr><td>M654</td> <td>INFO</td> <td>URL ... was added to the list of missing packages.</td> <td>For information only</td> </tr>
</table>

\section build_make  GNU make utility

The \c make utility automatically determines which pieces of a large program need to be recompiled, and issues commands to
recompile them. The CMSIS-Build installer for Windows contains a copy of the GNU Make version 4.2 compiled for Win32. For
full documentation visit: https://www.gnu.org/software/make/manual/make.html#Options-Summary.

Operation
-----------------------------
\b make is invoked from the command line:

\code
 make [options] [target] ...
\endcode 

<br>
<table class="cmtable" summary="make options">
  <tr>
    <th>\[options]</th>
    <th>Short Name</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>-f FILE</td>
    <td>Specify makefile</td>	
    <td>Run make for the makefile specified by FILE</td>
  </tr>
  <tr>
    <td>-j [N]</td>
    <td>Run parallel jobs.</td>	
    <td>Speed up builds by allowing N jobs at once; infinite jobs with no arg.</td>
  </tr>
  <tr>
    <td>-r</td>
    <td>Run make without built-in rules</td>	
    <td>Disable the implicit rules built into make.</td>
  </tr>
  <tr>
    <td>-s</td>
    <td>Run make in silent mode</td>	
    <td>Don't echo recipes.</td
  </tr>
  <tr>
    <th>[target]</th>
	<th>Short Name           </th>
    <th>Description</th>
  </tr>
  <tr>
    <td>clean</td>
    <td nowrap>Cleanup build</td>	
    <td>Requests to remove intermediate build output files</td>
  </tr>
</table>

Examples
-----------------------------
Build the project:
\code
 make -j -f MyProject.mak
\endcode

Cleanup the project build directories:
\code
 make -f MyProject.mak clean
\endcode


\section build_cbuildsh cbuild.sh script

The \c cbuild.sh script is an example implementation of a build flow chaining the utilities such that it replicates the
build steps of existing CMSIS-Pack aware IDEs and also attempts to merge configuration files if necessary.

The script:
- reads and \ref build_helper "checks" the CPDSC file and identifies missing packs.
- installs missing packs.
- reads the CPDSC file and generates RTE header files and copies missing configuration files.
- generates the project makefile <tt>&lt;project>.mak</tt>.
- generate configuration files merge makefile <tt>&lt;project>_cfg.mak</tt>.
- updates the config files where updated versions are available.
- invokes the build environment with recipes (<tt>make makefile &lt;project>.mak</tt>) to compile/assemble the source
  modules and create the binary output (<tt>*.axf, *.lib</tt>).

<b>cbuild.sh Bash script template file</b>
\code
# get project filename from command line
project=$1
 
# call cbuildgen config to check for missing packs
rm -f "${project}".cpinstall
cbuildgen config "${project}".cpdsc
if [ $? -ne 0 ]
  then
  exit 1
fi
 
# call pack installer to install missing packs
if [ -e "${project}".cpinstall ]
  then
  dos2unix "${project}".cpinstall
  cpinstall.sh "${project}".cpinstall
  if [ $? -ne 0 ]
    then
    exit 1
  fi
fi
 
# call cbuildgen to generate makefiles for make and ccmerge
cbuildgen make --merge=ccmerge "${project}".cpdsc
if [ $? -ne 0 ]
  then
  exit 1
fi
 
# call make to merge config files (ccmerge for windows) 
make -s -j -r -f "${project}"_cfg.mak $2
if [ $? -ne 0 ]
  then
  echo "make ${project}_cfg.mak failed!"
  exit 1
fi
 
# call make to build the project
make -j -r -f "${project}".mak $2
if [ $? -ne 0 ]
  then
  echo "make "${project}".mak failed!"
  exit 1
fi
 
echo "cbuild.sh finished successfully!"
exit 0
\endcode

\b Usage:

\code
$ cbuild.sh
CMSIS Build (cbuild.sh) 0.1.0 (Thu, Dec 12, 2019 14:46:30)
Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
error: argument required
Usage:
  cbuild.sh <project>.cpdsc [<makefile target>]
 
  <project>          : Project name = name of CPDSC file
  <makefile target>  : Optional makefile target name, for example 'clean'
\endcode


\subsection build_cpinstall cpinstall.sh script

The \c cpinstall.sh script demonstrates how missing packs (listed in the *.cpdsc file) identified by \c cbuildgen
\c configure allows you to install missing CMSIS-Packs into your repository.

<b>cpinstall.sh CMSIS-Pack installation script</b>

This script downloads CMSIS-Packs from the URLs listed in the file passed as argument. The pack files are downloaded and
stored in the \c ${CMSIS_PACK_ROOT}/.Download folder. Afterwards, each pack gets extracted into the specified CMSIS-Pack
folder structure \c ${CMSIS_PACK_ROOT}/&lt;vendor>/&lt;packname>/&lt;version>.

\note
- The mandatory commandline argument for the \c cpinstall.sh bash script is the filename of the file listing valid URLs of
  the packs that need to get installed.
- The \c $CMSIS_PACK_ROOT environment variable has to be set and must reference an existing CMSIS-Pack directory containing
  at least the file ./Web/index.pidx (use \ref build_cpcreatereposh "cpcreaterepo.sh" to initialize a new CMSIS-Pack
  directory).
- In the input file, every CMSIS pack download url is specified per line:
  \code
  <url>/<vendor>.<packname>.<version>.pack
  \endcode
  e.g.
  \code
  https://www.keil.com/pack/ARM.CMSIS.5.6.0.pack
  https://www.keil.com/pack/ARM.CMSIS-Driver.2.5.0.pack
  \endcode

\b Usage:
\code
$ cpinstall.sh missing_packs.txt
CMSIS Pack installation utility (cpinstall.sh) 0.1.0 (Fri, Dec  6, 2019 09:10:03)
Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
info: reading file: missing_packs.txt
https://www.keil.com/pack/ARM.CMSIS.5.6.0.pack
######################################################################### 100.0%
######################################################################### 100.0%
info: ARM.CMSIS.5.6.0.pack installing into /c/tmp/CMSIS_PACK_ROOT/ARM/CMSIS/5.6.0
pack installation completed successfully
\endcode


\subsection build_ccmerge ccmerge utility

The CMSIS-Build package contains the \c ccmerge utility for Windows only. It merges configuration files using the
Configuration Wizard Annotations as specified here:
https://arm-software.github.io/CMSIS_5/Pack/html/configWizard.html.

Operation
-----------------------------
The command syntax is as follows:

\code
 CCMERGE -pfile <pfilename> -cfile <cfilename> [-merge] [-details]
\endcode 

<br>
<table class="cmtable" summary="ccmerge Arguments">
  <tr>
    <th>&lt;argument></th>
    <th style="min-width:175px">Short Name</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>-pfile FILE</td>
	<td>Config from pack</td>
    <td>Config file FILE located in selected component/pack.</td>	
  </tr>
  <tr>
    <td>-cfile FILE</td>
	<td>Config in project</td>
    <td>Config file FILE located in project.</td>	
  </tr>
  <tr>
    <td>-merge</td>
    <td>Perform merge</td>	
    <td>Merge settings from config file in project into config file from pack. If successful, save a copy 
	    of the config file in project and replace with merged file. Note, if this option is not set the
		tool will run the merge but not update any files (only checking)</td
  </tr>
  <tr>
    <td>-details</td>
	  <td>Create merge log</td>
    <td>Create a log file (*.mlog) in the respective project folder detailing the merge process.</td>
  </tr>
</table>

Examples
-----------------------------
For example run the 

\code
ccmerge -pfile $CMSIS_PACK_ROOT/ARM/CMSIS/5.6.0/CMSIS/RTOS2/RTX/Config/RTX_Config.h -cfile RTE/CMSIS/RTX_Config.h -merge
\endcode


\subsection build_cpcreatereposh cpcreaterepo.sh script

The \c cpcreaterepo.sh script allows you to setup an empty pack repository, in case you need to setup a build environment
from scratch. You can either specify the directory to be created as command line argument or initializing the environment
variable \c $CMSIS_PACK_ROOT accordingly prior to invoking the script without arguments. In addition the public CMSIS-Pack
index file will be downloaded from https://www.keil.com/pack/index/pidx and stored in the .Web subdirectory. This file is
used by \c cbuildgen to find the latest version information for each public pack.

If you provide no argument, then the \c $CMSIS_PACK_ROOT is used:
\code
$cpcreaterepo
\endcode

Proving a directory path  as the argument, it is used to create the repository:
\code
$cpcreaterepo cmsisbuild/myPackRepo
\endcode

\b Usage:
\code
$ ./cpcreaterepo.sh
CMSIS Pack create new pack repository utility (cpcreaterepo.sh) 0.1.0 (Fri, Dec  6, 2019 11:45:16)
Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
info: no argument passed - using $CMSIS_PACK_ROOT environment variable:
           /c/tmp/CMSIS_PACK_ROOT
downloading package index file from
######################################################################## 100.0%
pack repository created successfully
\endcode


\subsection build_cbuild_uvprojxsh cbuild_uvprojx.sh script

The \c cbuild_uvprojx.sh script is a helper script that allows you to build your project starting from a µVision project
(*.uvprojx). The script invokes µVision, converting the native project format into the CMSIS-Build project description
(*.cpdsc) for all targets contained in the µVision project. The cpdsc files are named after the targets of the µVision
project. After conversion, the script invokes the \ref build_cbuildsh for each exported target cpdsc.

\note
- This script only works on Windows as it requires an installation of Arm Keil MDK
- This script requires the environment variable \c $MDK_ROOT to point to the base directory of the Keil MDK installation.
  The default setup in CMSIS-Build is '/c/Keil_v5'
- Be aware of the feature loss of the conversion, as not all build features of µVision are available in CMSIS-Build, e.g.:
  - User commands pre and post build
  - \c fcarm code generator
  - Linker script generation

\b Usage:
\code
$ cbuild_uvprojx.sh
CMSIS Build (cbuild_uvprojx.sh) 0.1.0 (Mon, Dec 16, 2019 16:06:56)
Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
Usage:
  cbuild_uvprojx.sh <projectname>.uvprojx
 
  <projectname>.uvprojx : uVision Project filename
\endcode

<b>cbuild_uvprojx.sh helper script file example</b>

\code
$ cbuild_uvprojx.sh FTP_Server.uvprojx
CMSIS Build (cbuild_uvprojx.sh) 0.1.0 (Mon, Dec 16, 2019 16:06:56)
Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
uVision has created CPDSC files for the following targets:
Debug.cpdsc
Release.cpdsc
 --------------------------------------------------------------------
 calling cbuild.sh for Debug.cpdsc
 --------------------------------------------------------------------
 ...
 --------------------------------------------------------------------
 calling cbuild.sh for Release.cpdsc
 --------------------------------------------------------------------
 ...
builds completed for:
Debug.cpdsc
Release.cpdsc
total: 2 failed: 0
\endcode
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page build_examples  Usage example

The following example project demonstrates how to run through the CMSIS-Build flow.


\section build_examples_man_cpdsc Basic example

Prerequisites
-------------
- Run through the \ref build_bashenvsetup_install.
- Copy the <a href="MyProject.zip" target="_blank"><b>MyProject.zip</b></a> file to your PC and extract its contents to your
  project directory.
- This description assumes that the project directory is called <tt>/c/project</tt> and that CMSIS-Build is installed in
  <tt>/c/cbuild</tt>.

Running CMSIS-Build
-------------------
- Open a Bash console in the directory <tt>/c/project</tt>.
- Source the setup file in your console:
  \code
  $ source /c/cbuild/etc/setup
  \endcode
  The console output shows the settings that have been sourced:
  \code
  Set CMSIS_PACK_ROOT=/C/Users/user/AppData/Local/Arm/Packs
  Set CMSIS_BUILD_ROOT=/C/cbuild/bin
  Set CMSIS_COMPILER_ROOT=/C/Users/user/AppData/Local/Arm/Compilers
  Added /C/cbuild/bin into the PATH
  \endcode
- For a CI test, it can be beneficial to setup the whole environment from scratch. So run the \ref build_cpcreatereposh to
  create a new CMSIS-Pack repository:
  \code
  $ cpcreaterepo.sh MyPackRepo
  \endcode
  The console output shows a successful creation of the repository:
  \code
  CMSIS Pack create new pack repository utility (cpcreaterepo.sh) 0.1.0 (Wed, Dec 18, 2019  5:18:22 PM)
  Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
  info: reading directory: MyPackRepo
  downloading package index file from
  ######################################################################## 100.0%
  pack repository created successfully in:
  /C/Users/user/AppData/Local/Arm/Packs
  \endcode
- You now need to change the \c CMSIS_PACK_ROOT variable to the newly created location:
  \code
  $ export CMSIS_PACK_ROOT=/c/project/MyPackRepo
  \endcode
- The project already contains a MyProject.cpdsc file, so we can immediately start the \ref build_cbuildsh
  \code
  $ cbuild.sh MyProject.cpdsc
  \endcode
  The console output shows a successful build:
  \code
  CMSIS Build (cbuild.sh) 0.1.0 (Wed, Dec 18, 2019  4:35:27 PM)
  Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
  MyProject.cpdsc validates
  CMSIS Build (cbuildgen) 0.1.1 (Dec 12 2019, 14:36:01)
  Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
  M654: URL 'https://www.keil.com/pack/ARM.CMSIS.5.6.0.pack' was added to the list of missing packages.
  M650: Setup run successfully.
  dos2unix: converting file MyProject.cpinstall to Unix format...
  CMSIS Pack installation utility (cpinstall.sh) 0.1.0 (Mon, Dec 16, 2019  3:12:37 PM)
  Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
  info: reading file: MyProject.cpinstall
  dos2unix: converting file MyProject.cpinstall to Unix format...
  https://www.keil.com/pack/ARM.CMSIS.5.6.0.pack
  ######################################################################## 100.0%#=#=#
  info: ARM.CMSIS.5.6.0.pack installing into /c/project/MyPackRepo/ARM/CMSIS/5.6.0
  pack installation completed successfully
  CMSIS Build (cbuildgen) 0.1.1 (Dec 12 2019, 14:36:01)
  Copyright (C) 2019 ARM Ltd and ARM Germany GmbH. All rights reserved.
  M653: Local config file RTE/Device/ARMCM0/ARMCM0_ac6.sct was not found. Copying default file from package.
  M653: Local config file RTE/Device/ARMCM0/startup_ARMCM0.c was not found. Copying default file from package.
  M653: Local config file RTE/Device/ARMCM0/system_ARMCM0.c was not found. Copying default file from package.
  M651: Generated makefile for merging config files: 'MyProject_cfg.mak'
  M652: Generated makefile for project building:'MyProject.mak'
  mkdir -p "Objects/RTE/Device/Startup/C Startup"
  mkdir -p "Objects/Source"
  "/C/Keil_v5/ARM/ARMCLANG/bin/armclang"  @"Objects/Source/MyMain.o._cc"
  "/C/Keil_v5/ARM/ARMCLANG/bin/armclang"  @"Objects/RTE/Device/Startup/C Startup/startup_ARMCM0.o._cc"
  "/C/Keil_v5/ARM/ARMCLANG/bin/armclang"  @"Objects/RTE/Device/Startup/C Startup/system_ARMCM0.o._cc"
  "/C/Keil_v5/ARM/ARMCLANG/bin/armlink" --via="Objects/MyBinary.axf._ld"
  cbuild.sh finished successfully!
  \endcode
- The project binary will be created in the \c ./Objects directory:
  \code
  $ ls ./Objects
  MyBinary.axf  MyBinary.axf._ld  RTE/  Source/
  \endcode
*/