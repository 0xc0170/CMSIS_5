/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\mainpage

\b CMSIS-Zone defines methods to describe system resources and to partition these resources into multiple projects and execution areas. 
The system resources may include multiple processors, memory areas, peripherals and related interrupts. 
The system resources and partition assignments are stored in \ref zoneFormat (XML based). 

\b CMSIS-Zone includes a utility that manages these XML files. This utility:
  - displays all available system resources including memory and peripherals
  - allows to partition memory and assign resources to sub-systems.
  - supports the setup of secure, non-secure, and MPU protected execution zones with assignment of memory, peripherals, and interrupts.
  - provides a data model for generation of configuration files for tool and hardware setup.
  
The following diagram explains the development work flow when using the \b CMSIS-Zone management tool. 

\image html Partitioning_Workflow.png  "CMSIS-Zone development workflow"

The CMSIS-Zone utility reads a \ref rzone ".rzone" file that defines the overall system resources of an SoC system.
An interactive GUI supports the system partitioning. The assignments of the various partitions (also called zones)
saved in the \ref azone ".azone" file.

The combined information of resources and assignments can be exported to multiple \ref rzone ".rzone" files that represent a sub-system.
By using file templates the CMSIS-Zone utility can create tool or hardware configuration files.

It is possible to uses these steps multiple times which allows to split a complex SoC design with multiple processors into 
smaller sub-systems. For example a multi-core device can be partitioned in steps:
  - Step 1: split the multi-processor system into single processor sub-systems.
  - Step 2: create the partitions for secure and non-secure execution.
  - Step 3: configure MPU protected execution zones.

The following SoC diagram exemplifies step 1 and step 2 of this workflow. 
  
\image html Partitioning_Hardware.png  "Hardware partitioning in multiple steps"
  

The following sections explain: 
- \ref zoneToolUsage shows hot to use the CMSIS-Zone stand-alone tool to generate the relevant project information to be used
  in integrated development environments (IDEs).
- \ref zoneFormat (XML based) that stores system resource information and the configuration of project zones and execution zones.
- \ref GenDataModel which is used to create tool set-up files and hardware configuration files.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zone_revisionHistory Revision History of CMSIS-Zone

<table class="cmtable" summary="Revision History">
    <tr>
      <th>Version</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>0.0.3 (Preview 3)</td>
      <td>Initial specification draft</td>
    </tr>
</table>
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page UseCases CMSIS-Zone Use Cases

\b CMSIS-Zone simplifies to manage the complexity and the configuration of modern embedded systems that frequently include
multiple processors and/or memory protection hardware. It helps to split the embedded application various projects which
creates the need to partition system resources. And it simplifies the consistent configuration of access rights across the
system, for example when using an MPU (memory protection unit).

The following section describes several uses cases that benefit from \b CMSIS-Zone.


\section UseCase_MPU MPU Protection

Focused on a single core microcontroller one might want to utilize the memory protection unit (MPU) capabilities
to segregate parts of an application. Thus the need to partition the system resources accordingly arises.

\image html mpu.png  "MPU Protection"


\section UseCase_TrustZone TrustZone Partitioning

TrustZone extensions add another degree of segregation which must be handled consistently.
In this case one has to handle MPU settings per security context and SAU configuration.

\image html trustzone.png  "TrustZone Partitioning and MPU Protection"


\section UseCase_MultiCore Multi-Core Partitioning

Beside traditional single cores asymmetric and hybrid multi-core devices contribute to increasing development complexity
for embedded systems. Having multiple cores running different parts of an application concurrently needs a well defined
resource assignment to prevent undesired misbehavior.

\image html multicore.png  "Multi-Core Partitioning"
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zoneToolUsage CMSIS-Zone Utility

The following explains how to use the CMSIS-Zone stand-alone utility to create the required configuration files that can be
used further in other toolchains.

This documentation contains the following:
 - \subpage zTInstall shows how to install the utility.
 - \subpage zTUI introduces the utility's GUI.
 - \subpage zTInteractiveMode explains how to create projects and zones using the GUI.
 - \subpage zTCLI demonstrates how to work with the command line interface.
 - \subpage zTExamples contains pre-built demos for various devices.

\note

It is assumed that you are familiar with Eclipse and
<a href="https://arm-software.github.io/CMSIS_5/Pack/html/index.html" target="_blank">CMSIS-Packs</a>. The relevant device
family pcks for your target device need to be installed on your computer.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTInstall Installation

CMSIS-Zone is currently available as an executable Eclipse environment. Download the zipped archive from
<a href="" target="_blank">here</a> and save it to your computer. Unzip it and run CDT_2019_3\\eclipse\\eclipse.exe.

Before creating the first project, you have to point the tool to your pack repository so that it can pick up relevant device
information. Go to <b>Window - Preferences</b> and select <b>CMSIS Packs</b>:

\image html CMSISPacksPreferences.png

Browse to your pack root folder, usually \c C:\\users\\username\\AppData\\Local\\Arm\\Packs. Click <b>Apply and Close</b>.

This concludes the installation and setup of the Eclipse environment.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTUI User Interface

The CMSIS-Zone Utility user interface offers menus, toolbars, dialog boxes, and windows to manage the various aspects of your
project.


\section zTGUI CMSIS-Zone GUI

The utility's GUI provides menus for selecting commands and toolbar buttons in the \ref zTGUIZoneEditor window:

\image html GUI.png


\section zTProjEx Project Explorer

Projects that are currently available in the Eclipse workspace are shown in the <b>Project Explorer</b>. When creating a new
project, you will first find the \ref rzone ".rzone" and the \ref azone ".azone" files here. Later, generator files and
generated files are shown as well:

\image html ProjectExplorerWindow.png "Project Explorer window showing a complex project"

In the <b>Project Explorer</b> window, you manage the project files. The following files are shown:

| File name                        | Description                                                          |
|----------------------------------|----------------------------------------------------------------------|
| \c project.azone                 | Project-level \ref azone ".azone" file                               |
| \c project.rzone                 | Project-level \ref rzone ".rzone" file                               |
| \c zone.azone                    | Zone-level \ref azone ".azone" file                                  |
| \c zone.rzone                    | Zone-level \ref rzone ".rzone" file                                  |
| <tt>*.ftl</tt>                   | Freemarker template file used to \ref GenDataModel "generate" output |
| \c helper.ftlinc                 | Helper file to generate Freemarker output                            |
| <tt>*.sct,</tt> \c partition_*.h | Generated output files                                               |


\section zTGUIZoneEditor Zone Editor

The <b>Zone Editor</b> shows \ref azone ".azone" files in two different views: \b Resource \b map and \b Zone \b map.

The \b Resource \b map shows all resources available to that system or sub-system. By default, it shows the selected device,
as well as lists of memories and peripherals:

\image html resource_map.png

The \b Zone \b map shows the same resources, but mapped to zones that have been created for the device:

\image html zone_map.png


\subsection zTGUIButtons Toolbar Buttons

The <b>Zone Editor</b> window contains toolbar buttons that offer direct access to functionality of the utility:

\image html Buttons.png

| Button                         | Description                                     |
|--------------------------------|-------------------------------------------------|
| Tree View                      | Shows the resources as a tree                   |
| List View                      | Shows the resources as a simple list            |
| Arrange memory regions         | Arranges memory regions according to their sizes |
| \ref zTUICreate "Add new zone" | Adds a new zone to the zone map                 |
| \ref zTUIGenerate "Generate"   | Generates CMSIS-Zone output files               |
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTInteractiveMode Interactive Mode

The following section explains the interactive mode of the CMSIS-Zone Utility.
The workflow is:

 -# \subpage zTUICreateProject that allows to manage system resources.
 -# \subpage zTUIMemPerRes allows to create sub-memory regions and defines properties such as access permissions.
 -# \subpage zTUIZonePart that assigns available resources to sub-projects or execution compartments.
 -# \subpage zTUIGenerate for device configuration and linker settings.


\page zTUICreateProject Create a CMSIS-Zone Project

Currently, the flow is not complete. Please use one of the pre-built \ref zTExamples instead:
- The \ref zTEMusca example shows the configuration of a multi-processor system with two Arm Cortex-M33 cores. Both cores
  offer TrustZone for Armv8-M and thus two zones (secure/non-secure) are created for each processor.
- the \ref zTELPC55 example is based on a multi-processor system with two Cortex-M33 processors, where only core 0 is eanbled
  with TrustZone for Armv8-M. Thus, the second core is not further divided into sub-zones.

<!--The following sections explain how the \ref zTEMusca example was created.-->


\page zTUIMemPerRes Memory and Peripheral Resources

The available memory can be further divided into \ref zTUIMemAdd "smaller regions" that are later assigned to zones, 
for example a zone for loader and zone for application.

For memory and peripherals \ref zTUIPerProp "properties" such as access permission, privilege, and security level can be configured.
These settings can be for example used to generate source code files that configure the device at run-time.


\section zTUIMemAdd Create Memory Regions

To create a new memory region, right-click on the memory that you want to divide and select <b>Add memory region</b>:

\image html AddMemoryBlock.png

In the dialog a name derived from the parent memory region is provided. Change this region name as needed and specify the size. 
You In this dialog, you change permissions, privilege, or security level for the memory region. When
done, click \b Finish.

\image html NewMemoryBlockWiz.png

The new memory region is immediately shown in the zone map. Depending on the security level, you may be able to assign this
new region only to certain zones. For example, secure memory regions cannot be assigned to a non-secure zone.

\image html IRAM1_1Display.png

\section zTUIPerProp Resource Properties

To change the properties of a resource, such as a peripheral for example, right-click the resource and select \b Properties.
Then, you can set permissions (\c peripheral, \c read, \c write, and \c execute) and select if only \c privileged or
\c unprivileged access is possible (or if it is not specified). You can also set a security level for the peripheral
(\c not specified, \c non-secure, \c non-secure callable, \c secure).


\page zTUIZonePart Zone Partitioning

Every CMSIS-Zone project consists of one or more zones. The basic flow to create zones is as follows:
- In case of multi-core devices, create a zone for each processor.
- Then create at least one zone for each processor to be able to assign memories and peripherals. If your device contains
  Arm Cortex-M cores supporting TrustZone for Armv8-M, create a secure and a non-secure partition for each of these cores.


\section zTUICreate Create Zones

To split a multi-processor system into single-processor sub-systems, you need to create new zones. Switch to the \b Zones tab
and click the <b>Add new zone</b> button:

\image html AddNewZoneButton.png

In the new window, you need to specify a name for the zone, select the applicable core, and choose the security level
(secure/non-secure).

In the \ref zTEMusca "Musca" example, a new zone called "CM33_0" was created and attached to processor core 0 without any
security attribute (not specified):

\image html NewZoneCM33_0.png

Similarly, an additional zone called "CM33_1" was created and attached to processor core 1, without security attribute.

\b Save your settings:

\image html  SaveButton.png

\note

Adding zones only works for the currently opened \ref azone ".azone" file.


\page zTUIGenerate Generate output files

The main purpose of the CMSIS-Zone utility is to generate files that represent the configured system and that can be used in
other toolchains for further development. The generator process creates:
-# required files for zones (\ref rzone ".rzone" and \ref azone ".azone" files, once you have \ref  zTUICreate "created" new
   zones.
-# output files, such as header and scatter files, once you have placed \ref GenDataModel "ftl files" in the project's
   \c ftl directory.
   
To start the generation, press the <b>Generate</b> button or use the menu item <b>CMSIS Zone - Generate</b>:

\image html GenCodeButton.png

Check \ref zTProjEx to observe the changes. In the current project, newly generated \c azone and \c rzone files appear, as
well as \c ftl and \c ftl_gen folders. To generate output in the \c ftl_gen folder, copy the relevant \c ftl files into the
\c ftl directory and rerun the generation. Observe the output:

\image html gen_output.png
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTCLI Command Line Mode

As the \ref rzone ".rzone" and \ref azone ".azone" files are XML based, it is possible to create or modify the files in external tools
without using the \ref zTInteractiveMode. To generate output files the CMSIS-Zone Utility can be started in
headless mode. The command line format is:

<tt>eclipsec.exe -noSplash  -consoleLog --launcher.suppressErrors -application com.arm.cmsis.zone.ui.headlessgen -azone FILENME.azone  -ftl FTL_DIR -ftl_gen FTL_GEN_DIR</tt>

\b  Where

| Parameter                                            | Description                                                    | Required |
|:-----------------------------------------------------|:---------------------------------------------------------------|:---------|
| \c -noSplash                                         | Suppresses Eclipse's splash screen                             | [required] |
| \c -launcher.suppressErrors                          | Suppresses error dialog                                        | [optional] |
| \c -consoleLog                                       | Suppresses diagnostic messages                                 | [optional] |
| \c -application \c com.arm.cmsis.zone.ui.headlessgen | Specifies the plug-in to be called                             | [required] |
| \c -azone \c FILNAME.azone                           | Specifies the .azone file to be processed                      | [required] |
| \c -ftl \c FTL_DIR                                   | Relative or absolute directory with templates to process       | [optional - by default, \c ftl directory under the azone's file path is used] |
| \c -ftl_gen \c FTL_GEN_DIR                           | Relative or absolute output directory to write generated files | [optional - by default, \c ftl_gen directory under the azone's file path is used] |
| \c -help                                             | Shows command line parameter information                       | [optional] |

<!--\b Examples
\code
eclipsec.exe -noSplash -application com.arm.cmsis.zone.ui.headlessgen -azone Musca-A1.azone
\endcode-->
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTExamples Examples

The following projects are available in the CMSIS-Zone repository on GitHub: https://github.com/ARM-software/CMSIS-Zone/tree/master/Examples.
These examples demonstrate the usage of the CMSIS-Zone utility.

| Example                    | Description                                                    |
|:---------------------------|:---------------------------------------------------------------|
| \subpage zTEMusca          | Musca project                                                  |
| \subpage zTELPC55          | Single processor Cortex-M33 project with TrustZone setup       |


\section zTExImport Import examples

Import the examples to Eclipse using the following flow:
- Go to <b>File - Import</b> and select <b>General - Existing Projects into Workspace</b>:

\image html import_from_file.png

Click \b Next.

Browse to the root directory, for example "Examples/LPC55S69/Zone", and select the project that you want to import. The import
projects window shows the available projects:

\image html import_projects.png

Click \b Finish. The project is imported and opened in the \ref zTProjEx.


\page zTEMusca Arm Musca-A1

todo

\page zTELPC55 NXP LPC55S69

This single processor demo application shows how to do the \ref UseCase_TrustZone. It is split into a secure and non-secure
part. Using CMSIS-Zone, it generates:
 - A header file that contains \#defines to control the various linker scatter files (and might be used in other parts of the
   application).
 - Memory protection controller (MPC) setup.
 - Peripheral protection controller (PPC) and related interrupt setup.
 - Secure attribution unit (SAU) setup.

The application itself shows how to implement calls between the secure and the non-secure part.


\section zTELPC55_Eclipse Using the CMSIS-Zone project

Import the project as explained in \ref zTExImport. Open the LPC55S69.azone file from the \ref zTProjEx. The \b Zone
\b Map shows two zones that have been created here: \c hello_world_s and \c hello_worls_ns:

\image html lpc55_zones.png

The zones use different Flash and SRAM regions for code and data, but share Flash configuration registers. Peripherals, such
as the system and IO configuration, as well as an UART are available in the secure world only. To generate the output, click
on the \ref zTUIGenerate "Generate" button in the Zone Editor tool bar. This creates the following files in the \c ftl_gen
folder:

| File                 | Generated File   | Description |
|----------------------|------------------|-------------|
| dump_fzone.txt.ftl   | dump_fzone.txt   | Dumps the complete model into a text file. |
| helper.ftlinc        | N/A              | Helper file required for some FTL functions. |
| mem_layout.h.ftl     | \ref zTELPC55_memlayout | Generates a header file containing the region definitions that can be used in scatter files. |
| scatter_ns.sct.ftl   | scatter_ns.sct   | Creates an exemplary scatter file for the non-secure zone. |
| scatter_s.sct.ftl    | scatter_s.sct    | Creates an exemplary scatter file for the secure zone. |
| tzm_config_mpc.c.ftl | \ref zTELPC55_confmpc | Generates the setup of the memory protection controller (MPC). |
| tzm_config_ppc.c.ftl | \ref zTELPC55_confppc | Generates the setup of the peripheral protection controller (PPC). |
| tzm_config_sau.c.ftl | \ref zTELPC55_confsau | Creates the configuration of the secure attribution unit (SAU). |

These files can be used in any IDE to create the final application. In the following, the usage in Arm Keil MDK is described.

\subsection zTELPC55_memlayout mem_layout.h

This header file contains the region definitions that can be used in scatter files. It is a good starting point to make the
project scatter files generic and reusable. Using scatter files with direct addresses makes later changes a tedious process,
while using the region definitions makes it easy to add changes at a later stage. The following is generated in the example:

\code
#ifndef MEM_LAYOUT_H
#define MEM_LAYOUT_H
 
#define REGION_CODE_S_START  0x10000000
#define REGION_CODE_S_SIZE   0xFE00
#define REGION_VENEER_START  0x1000FE00
#define REGION_VENEER_SIZE   0x200
#define REGION_DATA_S_START  0x30000000
#define REGION_DATA_S_SIZE   0x8000
#define REGION_CONFIG_START  0x9DE00
#define REGION_CONFIG_SIZE   0x2000
#define REGION_CODE_NS_START 0x10000
#define REGION_CODE_NS_SIZE  0x72000
#define REGION_DATA_NS_START 0x20008000
#define REGION_DATA_NS_SIZE  0x3C000
 
#endif
\endcode

\subsection zTELPC55_confmpc tzm_config_mpc.c

This file contains the function \b TZM_Config_MPC that is called during the TrustZone initialization. It sets up the memory
protection controller for Flash, Boot ROM, and all SRAMs:

\code
#include "tzm_config.h" 
#include "fsl_common.h"
 
void TZM_Config_MPC(void)
{
  /* Setup Memory Protection Controller (MPC) */
	/* Flash */
	AHB_SECURE_CTRL->SEC_CTRL_FLASH_ROM[0].SEC_CTRL_FLASH_MEM_RULE[0] = 0x00000033U;
	AHB_SECURE_CTRL->SEC_CTRL_FLASH_ROM[0].SEC_CTRL_FLASH_MEM_RULE[1] = 0x00000000U;
	AHB_SECURE_CTRL->SEC_CTRL_FLASH_ROM[0].SEC_CTRL_FLASH_MEM_RULE[2] = 0x00000000U;
	/* Boot ROM */
	AHB_SECURE_CTRL->SEC_CTRL_FLASH_ROM[0].SEC_CTRL_ROM_MEM_RULE[0] = 0x00000000U;
	AHB_SECURE_CTRL->SEC_CTRL_FLASH_ROM[0].SEC_CTRL_ROM_MEM_RULE[1] = 0x00000000U;
	AHB_SECURE_CTRL->SEC_CTRL_FLASH_ROM[0].SEC_CTRL_ROM_MEM_RULE[2] = 0x00000000U;
	AHB_SECURE_CTRL->SEC_CTRL_FLASH_ROM[0].SEC_CTRL_ROM_MEM_RULE[3] = 0x00000000U;
	/* SRAMX */
	AHB_SECURE_CTRL->SEC_CTRL_RAMX[0].MEM_RULE[0] = 0x00000000U;
	/* SRAM Bank 0 */
	AHB_SECURE_CTRL->SEC_CTRL_RAM0[0].MEM_RULE[0] = 0x11111111U;
	AHB_SECURE_CTRL->SEC_CTRL_RAM0[0].MEM_RULE[1] = 0x00000000U;
	/* SRAM Bank 1 */
	AHB_SECURE_CTRL->SEC_CTRL_RAM1[0].MEM_RULE[0] = 0x00000000U;
	AHB_SECURE_CTRL->SEC_CTRL_RAM1[0].MEM_RULE[1] = 0x00000000U;
	/* SRAM Bank 2 */
	AHB_SECURE_CTRL->SEC_CTRL_RAM2[0].MEM_RULE[0] = 0x00000000U;
	AHB_SECURE_CTRL->SEC_CTRL_RAM2[0].MEM_RULE[1] = 0x00000000U;
	/* SRAM Bank 3 */
	AHB_SECURE_CTRL->SEC_CTRL_RAM3[0].MEM_RULE[0] = 0x00000000U;
	AHB_SECURE_CTRL->SEC_CTRL_RAM3[0].MEM_RULE[1] = 0x00000000U;
	/* SRAM Bank 4 */
	AHB_SECURE_CTRL->SEC_CTRL_RAM4[0].MEM_RULE[0] = 0x00000000U;
	/* USB SRAM */
	AHB_SECURE_CTRL->SEC_CTRL_USB_HS[0].MEM_RULE[0] = 0x00000000U;
}
\endcode

\subsection zTELPC55_confppc tzm_config_ppc.c

This file contains the function \b TZM_Config_PPC that is called during the TrustZone initialization. It sets up the
peripheral protection controller:

\code
#include "tzm_config.h"
#include "fsl_common.h"
 
void TZM_Config_PPC(void)
{
  /* Setup Peripheral Protection Controller (PPC) */
	AHB_SECURE_CTRL->SEC_CTRL_AHB0_0_SLAVE_RULE = 0x03000000U;
	AHB_SECURE_CTRL->SEC_CTRL_AHB0_1_SLAVE_RULE = 0x00010000U;
	AHB_SECURE_CTRL->SEC_CTRL_AHB2[0].SEC_CTRL_AHB2_0_SLAVE_RULE = 0x00001001U;
	AHB_SECURE_CTRL->SEC_CTRL_APB_BRIDGE[0].SEC_CTRL_APB_BRIDGE0_MEM_CTRL0 = 0x00001133U;
	AHB_SECURE_CTRL->SEC_CTRL_APB_BRIDGE[0].SEC_CTRL_APB_BRIDGE1_MEM_CTRL1 = 0x00010000U;
	AHB_SECURE_CTRL->SEC_CTRL_APB_BRIDGE[0].SEC_CTRL_APB_BRIDGE1_MEM_CTRL3 = 0x00000301U;
}\endcode

\subsection zTELPC55_confsau tzm_config_sau.c

This file contains the function \b TZM_Config_SAU that is called during the TrustZone initialization. It sets up the secure
attribution unit and configures the interrupts to be secure or non-secure:

\code
#include "tzm_config.h" 
#include "fsl_common.h"
 
void TZM_Config_SAU(void)
{
    /* Disable SAU */
    SAU->CTRL = 0U;
     
    /* Configure SAU region 0 - CODE_NS */
    /* Set SAU region number */
    SAU->RNR = 0;
    /* Region base address */   
    SAU->RBAR = 0x10000;
    /* Region end address */
    SAU->RLAR = (0x81FFF & SAU_RLAR_LADDR_Msk) | 
                 /* Region memory attribute index */
                 ((0U << SAU_RLAR_NSC_Pos) & SAU_RLAR_NSC_Msk) |
                 /* Enable region */
                 ((1U << SAU_RLAR_ENABLE_Pos) & SAU_RLAR_ENABLE_Msk);
    /* Configure SAU region 1 - Config */
    /* Set SAU region number */
    SAU->RNR = 1;
    /* Region base address */   
    SAU->RBAR = 0x9DE00;
    /* Region end address */
    SAU->RLAR = (0x9FDFF & SAU_RLAR_LADDR_Msk) | 
                 /* Region memory attribute index */
                 ((0U << SAU_RLAR_NSC_Pos) & SAU_RLAR_NSC_Msk) |
                 /* Enable region */
                 ((1U << SAU_RLAR_ENABLE_Pos) & SAU_RLAR_ENABLE_Msk);
    /* Configure SAU region 2 - Veneer */
    /* Set SAU region number */
    SAU->RNR = 2;
    /* Region base address */   
    SAU->RBAR = 0x1000FE00;
    /* Region end address */
    SAU->RLAR = (0x1000FFFF & SAU_RLAR_LADDR_Msk) | 
                 /* Region memory attribute index */
                 ((1U << SAU_RLAR_NSC_Pos) & SAU_RLAR_NSC_Msk) |
                 /* Enable region */
                 ((1U << SAU_RLAR_ENABLE_Pos) & SAU_RLAR_ENABLE_Msk);
    /* Configure SAU region 3 - DATA_NS */
    /* Set SAU region number */
    SAU->RNR = 3;
    /* Region base address */   
    SAU->RBAR = 0x20008000;
    /* Region end address */
    SAU->RLAR = (0x20043FFF & SAU_RLAR_LADDR_Msk) | 
                 /* Region memory attribute index */
                 ((0U << SAU_RLAR_NSC_Pos) & SAU_RLAR_NSC_Msk) |
                 /* Enable region */
                 ((1U << SAU_RLAR_ENABLE_Pos) & SAU_RLAR_ENABLE_Msk);
                  
     /* Force memory writes before continuing */
    __DSB();
    /* Flush and refill pipeline with updated permissions */
    __ISB();     
    /* Enable SAU */
    SAU->CTRL = 1U;
 
   /* Interrupt configuration */
    NVIC->ITNS[0] = 0x2040000C; // RTC, ADC, GINT1, GINT0
}
\endcode


\section zTELPC55_MDK Using the MDK project

The example project can be loaded, built and debugged in µVision by performing the following steps:

-# Navigate to Examples/LPC55S69/MDK
-# Open the multi-project workspace hello_world.uvmpw
-# Optional: Update the generated files by executing the copy_gen.bat scripts in hello_world_s\\mdk and hello_world_ns\\mdk
   folders.
-# Run the batch build in MDK. Both projects, hello_world_s and hello_world_ns need to be compiled in order.
-# Set hello_world_s as active project.
-# Connect the LPC55S69-EVK using a Micro-USB cable at Debug Link (P6).
-# Open <b>Options for Target - Debug</b> and make sure that the CMSIS-DAP ARMv8-M Debugger is selected and the LPC-LINK2 is
   used.
-# Optional: Open a serial terminal program (i.e. PuTTY) on the virtual serial port provided in parallel to the debugger
   (e.g. USB Serial Device). Configure the port to 115200/8N1.
-# Launch a debug session and watch the serial console output:
   \image html hello_world_output.png

\section zTELPC55_MDK_Setup MDK project setup

The multiproject workspace contains the secure \c hello_world_s project and the non-secure \c hello_world_ns project:

\image html hello_world_proj_window.png

The projects use the files generated in CMSIS-Zone as follows:

| File                    | Used in | Description |
|-------------------------|---------|-------------|
| \ref zTELPC55_memlayout | hello_world_s, hello_world_ns | Input for the scatter files. |
| \ref zTELPC55_confmpc   | hello_world_s | Functions called from tzm_config.c |
| \ref zTELPC55_confppc   | hello_world_s | Functions called from tzm_config.c |
| \ref zTELPC55_confsau   | hello_world_s | Functions called from tzm_config.c |

The scatter files \c hello_world_s.sct and \c hello_world_ns.sct are based on the original scatter files from NXP and are
using a preinclude to mem_layout.h to get the information about the different memory regions.

\note
If you want to learn more about the general project layout for an Armv8-M project using TrustZone, refer to
<a href="https://www.keil.com/appnotes/docs/apnt_291.asp" target="_blank">Application Note 291</a>.

\subsection zTELPC55_hwsScatter hello_world_s.sct

As explained previously, the \#defines in \ref zTELPC55_memlayout can be used to create generic scatter files that are easy
to update once changes in the CMSIS-Zone project happen. Using the \b mem_layout.h file from CMSIS-Zone, the following
scatter file is used in the secure \c hello_world project:

\code
; Use Arm compiler 6 to pre-process the scatter file and pull in the defines from the mem_layout.h file:
#! armclang -E --target=arm-arm-none-eabi -mcpu=cortex-m33 -I../ -xc
 
#include "mem_layout.h"
 
; *------- <<< Use Configuration Wizard in Context Menu >>> ------------------
 
;<h> Stack Configuration
;  <o> Stack Size (in Bytes) <0x0-0xFFFFFFFF:8>
;</h>
#define STACK_SIZE 0x400
 
;<h> Heap Configuration
;  <o> Heap Size (in Bytes) <0x0-0xFFFFFFFF:8>
;</h>
#define HEAP_SIZE 0xC00
 
; *-------------- <<< end of configuration section >>> -----------------------

LR_CODE_S REGION_CODE_S_START REGION_CODE_S_SIZE {
  ER_CODE_S REGION_CODE_S_START REGION_CODE_S_SIZE {
  	* (RESET,+FIRST)
    * (InRoot$$Sections)
    .ANY (+RO, +XO)
  }
  RW_DATA_S REGION_DATA_S_START REGION_DATA_S_SIZE-HEAP_SIZE-STACK_SIZE {
    .ANY (+RW +ZI)
  }
#if HEAP_SIZE>0
  ARM_LIB_HEAP REGION_DATA_S_START+REGION_DATA_S_SIZE-HEAP_SIZE-STACK_SIZE EMPTY HEAP_SIZE {
  }
#endif
#if STACK_SIZE>0
  ARM_LIB_STACK REGION_DATA_S_START+REGION_DATA_S_SIZE-STACK_SIZE EMPTY STACK_SIZE {
  }
#endif
}
LR_VENEER REGION_VENEER_START REGION_VENEER_SIZE {
  ER_VENEER REGION_VENEER_START REGION_VENEER_SIZE {
  	*(Veneer$$CMSE)
  }
}
\endcode

\subsection zTELPC55_TZSetup TrustZone Setup at Startup

During the system initialization, the function \b SystemInitHook is called. This is used when application specific code needs
to be called as close to the reset entry as possible. In this example, this function calls \b BOARD_InitTrustZone, which
calls the three TZM_Config_* functions:

\image html lpc55_system_startup.png
*/