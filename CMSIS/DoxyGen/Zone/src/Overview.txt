/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\mainpage

\b CMSIS-Zone defines methods to describe system resources and to partition these resources into multiple projects and execution areas. 
The system resources may include multiple processors, memory areas, peripherals and related interrupts. 
The system resources and partition assignments are stored in \ref zoneFormat (XML based). 

\b CMSIS-Zone includes a utility that manages these XML files. This utility:
  - displays all available system resources including memory and peripherals
  - allows to partition memory and assign resources to sub-systems.
  - supports the setup of secure, non-secure, and MPU protected execution zones with assignment of memory, peripherals, and interrupts.
  - provides a data model for generation of configuration files for tool and hardware setup.
  
The following diagram explains the development work flow when using the \b CMSIS-Zone management tool. 

\image html Partitioning_Workflow.png  "CMSIS-Zone development workflow"

The CMSIS-Zone utility reads a \ref rzone ".rzone" file that defines the overall system resources of an SoC system.
An interactive GUI supports the system partitioning. The assignments of the various partitions (also called zones)
saved in the \ref azone ".azone" file.

The combined information of resources and assignments can be exported to multiple \ref rzone ".rzone" files that represent a sub-system.
By using file templates the CMSIS-Zone utility can create tool or hardware configuration files.

It is possible to uses these steps multiple times which allows to split a complex SoC design with multiple processors into 
smaller sub-systems. For example a multi-core device can be partitioned in steps:
  - Step 1: split the multi-processor system into single processor sub-systems.
  - Step 2: create the partitions for secure and non-secure execution.
  - Step 3: configure MPU protected execution zones.

The following SoC diagram exemplifies step 1 and step 2 of this workflow. 
  
\image html Partitioning_Hardware.png  "Hardware partitioning in multiple steps"
  

The following sections explain: 
- \ref zoneToolUsage shows hot to use the CMSIS-Zone stand-alone tool to generate the relevant project information to be used
  in integrated development environments (IDEs).
- \ref zoneFormat (XML based) that stores system resource information and the configuration of project zones and execution zones.
- \ref GenDataModel which is used to create tool set-up files and hardware configuration files.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zone_revisionHistory Revision History of CMSIS-Zone

<table class="cmtable" summary="Revision History">
    <tr>
      <th>Version</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>0.0.3 (Preview 3)</td>
      <td>Initial specification draft</td>
    </tr>
</table>
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page UseCases CMSIS-Zone Use Cases

\b CMSIS-Zone simplifies to manage the complexity and the configuration of modern embedded systems that frequently include multiple processors and/or memory protection hardware.
It helps to split the embedded application various projects which creates the need to partition system resources.
And it simplifies the consistent configuration of access rights across the system, for example when using an MPU (memory protection unit).

The following section describes several uses cases that benefit from \b CMSIS-Zone.

\section UseCase_MPU MPU Protection

Focused on a single core microcontroller one might want to utilize the memory protection unit (MPU) capabilities
to segregate parts of an application. Thus the need to partition the system resources accordingly arises.

\image html mpu.png  "MPU Protection"

\section UseCase_TrustZone TrustZone Partitioning

TrustZone extensions add another degree of segregation which must be handled consistently.
In this case one has to handle MPU settings per security context and SAU configuration.

\image html trustzone.png  "TrustZone Partitioning and MPU Protection"

\section UseCase_MultiCore Multi-Core Partitioning

Beside traditional single cores asymmetric and hybrid multi-core devices contribute to increasing development complexity
for embedded systems. Having multiple cores running different parts of an application concurrently needs a well defined
resource assignment to prevent undesired misbehavior.

\image html multicore.png  "Multi-Core Partitioning"
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zoneToolUsage CMSIS-Zone Utility

The following explains how to use the CMSIS-Zone stand-alone utility to create the required configuration files that can be
used further in other toolchains.

This documentation contains the following:
 - \subpage zTInstall shows how to install the utility.
 - \subpage zTUI introduces the utility's GUI.
 - \subpage zTInteractiveMode explains how to create projects and zones using the GUI.
 - \subpage zTCLI demonstrates how to work with the command line interface.
 - \subpage zTExamples contains pre-built demos for various devices.

\note

It is assumed that you are familiar with Eclipse and
<a href="https://arm-software.github.io/CMSIS_5/Pack/html/index.html" target="_blank">CMSIS-Packs</a>. The relevant device
family pcks for your target device need to be installed on your computer.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTInstall Installation

CMSIS-Zone is currently available as an executable Eclipse environment. Download the zipped archive from
<a href="" target="_blank">here</a> and save it to your computer. Unzip it and run CDT_2019_3\\eclipse\\eclipse.exe.

Before creating the first project, you have to point the tool to your pack repository so that it can pick up relevant device
information. Go to <b>Window - Preferences</b> and select <b>CMSIS Packs</b>:

\image html CMSISPacksPreferences.png

Browse to your pack root folder, usually \c C:\\users\\username\\AppData\\Local\\Arm\\Packs. Click <b>Apply and Close</b>.

This concludes the installation and setup of the Eclipse environment.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTUI User Interface

The CMSIS-Zone Utility user interface offers menus, toolbars, dialog boxes, and windows to manage the various aspects of your
project.


\section zTGUI CMSIS-Zone GUI

The utility's GUI provides menus for selecting commands and toolbar buttons in the \ref zTGUIZoneEditor window:

\image html GUI.png


\section zTProjEx Project Explorer

Projects that are currently available in the Eclipse workspace are shown in the <b>Project Explorer</b>. When creating a new
project, you will first find the \ref rzone ".rzone" and the \ref azone ".azone" files here. Later, generator files and
generated files are shown as well.

\todo explain .fzone, ftl files

\section zTGUIZoneEditor Zone Editor

The <b>Zone Editor</b> shows \ref azone ".azone" files in tow different views: \b Resources and \b Zones. The \b Resources
view shows all resources available to that system or sub-system. By default, it shows the selected device, as well as lists
of memories and peripherals:

\todo add screenshot of resources tab only here
<!--\image html toBeAdded.png-->

The \b Zones view shows the same resources, but mapped to zones that have been created for the device:

\todo add screenshot of zones tab only here
<!--\image html toBeAdded.png-->


\subsection zTGUIButtons Toolbar Buttons

The <b>Zone Editor</b> window contains toolbar buttons that offer direct access to functionality of the utility:

\image html Buttons.png

| Button                | Description |
|-----------------------|-------------|
| Tree View             | Shows the resources as a tree |
| List View             | Shows the resources as a simple list |
| Arrange memory blocks | Arranges memory blocks according to their sizes |
| Add new zone          | Adds a new zone to the zone map |
| Generate              | Generates CMSIS-Zone output files |
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTInteractiveMode Interactive Mode

In the \b Interactive \b Mode, use the GUI to
 - \ref zTUICreateProject "create new projects"
 - \ref zTUIPatitioning "create zones"
 - \ref zTUIGenerate "generate" the relevant output.


\section zTUICreateProject Create a CMSIS-Zone Project

Currently, the flow is not complete. Please use one of the pre-built \ref zTExamples instead:
- The \ref zTEMusca example shows the configuration of a multi-processor system with two Arm Cortex-M33 cores. Both cores
  offer TrustZone for Armv8-M and thus two zonoes (secure/non-secure) are created for each processor.
- the \ref zTELPC55 example is based on a multi-processor system with two Cortex-M33 processors, where only core 0 is eanbled
  with TrustZone for Armv8-M. Thus, the second core is not further divided into sub-zones.

The following sections explain how the \ref zTEMusca example was created.


\section zTUIPatitioning Create Zones

To split a multi-processor system into single-processor sub-systems, you need to create new zones. Switch to the \b Zones tab
and click the <b>Add new zone</b> button:

\image html AddNewZoneButton.png

In the new window, you need to specify a name for the zone, select the applicable core, and choose the security level
(secure/non-secure).

In the \ref zTEMusca "Musca" example, a new zone called "CM33_0" was created and attached to processor core 0 without any
security attribute (not specified):

\image html NewZoneCM33_0.png

Similarly, an additional zone called "CM33_1" was created and attached to processor core 1, without security attribute.

\b Save your settings:

\image html  SaveButton.png


\section zTAssign Assign Resources to Zones

In a first step, assign resources to both processor cores. Based on this assignment, you can later add zones to each core and
assign the resources available to the processor to these zones.

Using the check boxes in the \b Zones tab, assign resources to one of the processor cores or both:

\image html CoreResAsgn.png "Resource assignment for Musca-A1"

Green entries show that a resource has been assigned to only one zone, while orange entries show assignments to both zones.

Save your work.


\section zTUIGenerate Generate output

Next, click on the <b>Generate Code</b> button:

\image html GenCodeButton.png

This step creates separate \ref rzone ".rzone" and \ref azone ".azone" files for the two processors. Use them to add zones to
each processor.

In Eclipse's Project Explorer, expand <b>Musca-A_S_NS - CM33_0</b> and double-click \c CM33_0.azone. The file opens in the
<b>CMSIS-Zone Editor</b>. You now only see the resources that are assigned to this processor:

\image html CM33_0Azone.png

The system partitioning was refined by creating additional zones that contain security related settings:
- A zone called "CM33_0_S", with the security setting "Secure".
- A zone called "CM33_0_NS", with the security setting "Non-Secure".

\note

Adding zones only works for the currently opened \ref azone ".azone" file. To assign such zones to the second processor
instance, open the \c CM33_1.azone file.

The next section explains how to divide memory blocks into smaller chunks and how assign them to different zones.


\section zTAddMemoryBlock Add a Memory Block

Resources, such as memories can be divided into smaller parts. To create a new memory block, right-click on the memory that
you want to divide and select <b>Add memory block</b>:

\image html AddMemoryBlock.png

A new window opens. A name derived from the parent memory is already entered. Change it at your convenience. Specify the size
of the new block. In this dialog, you can set permissions, privilege, as well as security levels for the memory block. When
done, click \b Finish:

\image html NewMemoryBlockWiz.png

The new memory block is immediately shown in the zone map. Depending on the security level, you may be able to assign this
new block only to certain zones. For example, secure memory blocks cannot be assigned to non-secure zones. In this case, the
checkbox for the assignment is missing:

\image html IRAM1_1Display.png

Use this flow to partition the project as required by the system design. When done, \ref zTUIGenerate "generate" the output
files and continue in your toolchain of choice.
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTCLI Command Line Mode

As the \c rzone and \c azone files are XML based, it is possible to create them without the usage of the CMSIS-Zone utility.
If you create these files manually or using an automated process, you can use the CMSIS-Zone plug-in in a headless mode to
generate the FTL model and process templates. The command line is:

<tt>eclipsec.exe -noSplash  -consoleLog --launcher.suppressErrors -application com.arm.cmsis.zone.ui.headlessgen -azone FILENME.azone  -ftl FTL_DIR -ftl_gen FTL_GEN_DIR</tt>

\b  Where

| Parameter | Description | Required |
|-----------|-------------|----------|
| \c -noSplash                                         | Suppresses Eclipse's splash screen | [required] |
| \c -launcher.suppressErrors                          | Suppresses error dialog | [optional] |
| \c -consoleLog                                       | Suppresses diagnostic messages | [optional] |
| \c -application \c com.arm.cmsis.zone.ui.headlessgen | Specifies the plug-in to be called | [required] |
| \c -azone \c FILNAME.azone                           | Specifies the .azone file to be processed | [required] |
| \c -ftl \c FTL_DIR                                   | Relative or absolute directory with templates to process | [optional - by default, \c ftl directory under the azone's file path is used] |
| \c -ftl_gen \c FTL_GEN_DIR                           | Relative or absolute output directory to write generated files | [optional - by default, \c ftl_gen directory under the azone's file path is used] |
| \c -help                                             | Shows command line parameter information | [optional] |

<!--\b Examples
\code
eclipsec.exe -noSplash -application com.arm.cmsis.zone.ui.headlessgen -azone Musca-A1.azone
\endcode-->
*/


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\page zTExamples Examples

Pre-configures projects are available that demonstrate the usage of the CMSIS-Zone utility.

\section zTExImport Import examples

Import the examples to Eclipse using the following flow:
- Go to <b>File - Import</b> and select <b>General - Projects from Folder or Archive</b>:

\image html import_from_file.png

Click \b Next.

Using the \b Archive... button, browse to the import source and select the ZIP file that you want to import. The import
wizard window shows what is available in the archive. Select the \b Folder that can be imported as an <b>Eclipse project</b>:

\image html import_wizard.png

Click \b Finish. The project is imported and opened in the \ref zTProjEx.

\section zTEMusca Arm Musca-A1

\section zTELPC55 NXP LPC55S69
*/


