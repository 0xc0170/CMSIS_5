/**
\mainpage System View Description

Introduction
------------
The CMSIS System View Description format(CMSIS-SVD) formalizes the description of the system
contained in ARM Cortex-M processor-based microcontrollers, in particular, the memory mapped
registers of peripherals.
The detail contained in system view descriptions is comparable to the data in device 
reference manuals. The information ranges from high level functional 
descriptions of a peripheral all the way down to the definition and purpose of an individual bit
field in a memory mapped register. 

CMSIS-SVD files are developed and maintained by silicon vendors.
Silicon vendors manage their descriptions in a central, web-based Device Database. The CMSIS-SVD
files are down-loadable via a public web interface once they have been released by the silicon
vendor. Tool vendors use CMSIS-SVD files for providing device-specific debug views of peripherals in 
their debugger. Last but not least, CMSIS-compliant device header files are generated from CMSIS-SVD
files.

CMSIS-SVD Benefits
------------------
- For Software Developers:
  - Consistency between device header file and what is being displayed by the debugger.
  - Detailed information about peripherals, registers, fields, and bit values from within the debugger,
  without the need to reference device documentation.
  - Public access via a web interface to new and updated descriptions as they become available from silicon vendors.
  - Improved software development efficiency.

- For Silicon Vendors:
  - A tool vendor independent file format enables early device support by a wide range of toolchains with limited effort.
  - The XML-based format helps ease the integration into in-house design flows.
  - Automated generation of CMSIS compliant device header files.
  - Full control throughout the life cycle of the CMSIS-SVD files from creation to maintenance via the web-based Device Database.

- For Tool Vendors:
  - Unified file format across silicon vendors helps the efficiency of supporting a wide range of new devices in a timely manner.
  - Silicon vendors provide early review access to individuals ahead of the publishing date.
  - Updated descriptions are available over the web simplifying the maintenance of device support.



The Web Infrastructure
----------------------

\image html "CMSIS_SVD_WEB_DATABASE.png" "CMSIS-SVD Management Processes"

The diagram illustrates the management process steps for uploading, validating, reviewing, publishing, and downloading 
CMSIS-SVD files. 

- <b>Managing Files:</b>
A CMSIS-SVD file is uploaded by a silicon vendor via the web interface (<a href="https://cmsis.arm.com/user/index.php" target="_blank">
<b>Device Database</b></a>). The system performs a check against the CMSIS-SVD Schema and runs the SVDConv consistency checker. 
Only if both checks were successful the file will be stored in the SVD Storage. Files can be added, replaced, and deleted. 

- <b>Managing Devices:</b> 
The silicon vendor creates an entry for each of his devices in the database by defining a name and associating it with a 
CMSIS-SVD file from the SVD Storage. The publishing date set forth for a device is used by the system to determine
when this device becomes visible in the public device database. Prior to the publishing date, the silicon vendor can
grant review access to individuals for an individual device. Reviewers get notified by e-mail about a device being made
available for review.

- <b>Public Download:</b>
Public access to the silicon vendor specific CMSIS-SVD download pages is provided from <a href="http://cmsis.arm.com" target="_blank">cmsis.arm.com</a> or
 <a href="http://www.arm.com/cmsis" target="_blank">www.arm.com/cmsis</a>. Select the CMSIS-SVD tab and select the Silicon Vendor of interest from the list.
For the public download of the CMSIS-SVD files of published devices it is mandatory to:
  - Be logged in on the ARM web site.
  - Have accepted a silicon vendor specific End Users License Agreement (EULA).

More information about the web infrastructure can be found in the \subpage svd_web_pg

Language Specification and Conventions
----------------------
- \ref svd_Format_pg


CMSIS-SVD in ARM::CMSIS Pack
----------------------------

The following files relevant to CMSIS-SVD are present in the <b>ARM::CMSIS</b> Pack directories:

|File/Folder                   |Content                                                                
|------------------------------|-----------------------------------------------------------------------
|\b CMSIS\\Documentation\\SVD  | This documentation                                                    
|\b CMSIS\\SVD                 | Exemplary SVD file (\ref svd_Example_pg "ARM_Example.svd") and generated header file (ARM_Example.h).

<p>&nbsp;</p>
<hr>
*/


/* ************************************************************************************************ */
/**
\page svd_revisionHistory Revision History

From a schema perspective, CMSIS-SVD Version 1.1,1.2 and 1.3 are fully backward compatible to
version 1.0. 

Version   |  Description
:---------|:----------------------
V1.3.2    | Extended command line of SVDConv.exe for partition.h file generation.
V1.3.1    | Added protection element - Fixed elem_peripheral "peripheral" name type to allow array format - Added Cortex A class CPUs to enumeration.
V1.3      | Added array of peripherals and nesting of clusters. The \ref elem_cpu "CPU" section and \ref registerPropertiesGroup_gr "register properties" have been extended to reflect security aspects.
V1.2      | Added optional tags for Cortex-M7 in \ref elem_cpu "CPU".
V1.1      | Many of the features added in version 1.1 are required for generating CMSIS-Core device header files from a CMSIS SVD description. It can be expected that all CMSIS-SVD descriptions will comply with version 1.1 by now.
V1.0      | Initial revision.

<p>&nbsp;</p>
<hr>
*/


/* ************************************************************************************************ */
/**
\page svd_validate_file_pg SVD File Validation and Usage

The description quality is key to success of the CMSIS-SVD format. Aspects of
quality are:
  - Syntactical and structural compliance with the specified CMSIS-SVD format.
  - Consistency and correctness.
  - Completeness.
  - Level of detail.

<div class="title">Validation</div>
Automated validations are done on two levels:

-# <b>The CMSIS-SVD Schema File</b>: 
XML tools use the schema file for checking the syntactical and structural correctness of an XML file that
claims compliance with a certain format. The schema file <em>CMSIS-SVD.xsd</em> is located in 
the folder <b>.\\CMSIS\\Utilities</b> of the \b ARM::CMSIS Pack. 
\n\n
-# <b>SVD Conversion Utility:</b> The conversion utility \ref svd_SVDConv_pg checks the semantics and consistency of the data contained in a CMSIS-SVD file. 
\b SVDConv.exe is included in the CMSIS distribution. 

<div class="title">Usage</div>
CMSIS-SVD files can be used to generate:
 -# CMSIS-compliant device header files from a CMSIS-SVD description. Refer to the conversion tool \ref svd_SVDConv_pg for details.
  CMSIS device header files are developed and maintained by the silicon vendors. Therefore, the expectation is that this conversion is only of interest to
  these parties.
 -# Debug dialogs that communicate with a debugger. See below.
 
<b>System Views</b>
\n\n A number of tool vendors support the CMSIS-SVD format with their products.
  Refer to the tools documentation to find out how to use CMSIS-SVD descriptions with the debugger of your choice.
  You can download the latest versions of available CMSIS-SVD files from the  \ref svd_web_public_pg on the ARM web.
  \n \n
  <b>Generated Debug Dialog:</b>
  \image html "SystemViewer_Generated.png" "uVision Debug Window generated from ARM_Example.svd"
\n 

*/



/* ************************************************************************************************ */
/**
\page svd_Example_pg SVD File Example
\verbinclude "ARM_Example.svd"
*/


/* ************************************************************************************************ */
/**
\page svd_SVDConv_pg SVDConv.exe

\b SVDConv.exe is a command-line utility to validate CMSIS-SVD files and to generate CMSIS-compliant device header files.
\b SVDConv.exe is distributed with the \b ARM::CMSIS Pack (in the CMSIS\\Utilities directory) together with the CMSIS-SVD schema file. 

\b SVDConv.exe performs the following operations:
  - Checks the syntactical and structural compliance with the specified CMSIS-SVD format.
  - Checks the consistency, correctness, and completeness of the CMSIS-SVD file against the CMSIS-SVD schema file.
  - Generates CMSIS-compliant device header files, which can be used for software development.


Operation
---------
\b SVDConv.exe is invoked form the command line. The general command format is:
\code
SVDConv.exe <SVD_file> <options>
\endcode

<p>&nbsp;</p>

<table class="cmtable" summary="SVDConv Args">
  <tr>
    <th>\<options></th>
    <th>Short Name</th>
    <th>Description</th>
  </tr>
  <tr>
    <td> <i>none</i> </td>
    <td>Validation</td>
    <td>Perform a validation check of the SVD file. Errors and warnings are printed on screen.
  </td>
  </tr>
  <tr>
    <td> -b </td>
    <td>Log File</td>
    <td>Specify the log file name for writing messages. Default: screen.
    </td>
  </tr>
  <tr>
    <td> -o </td>
    <td>Output Path</td>
    <td>Specify an output path for the generated device header file or log file. Default: current directory.
    </td>
  </tr>
  <tr>
    <td> \-\-generate=header </td>
    <td>Generate Device Header File</td>
    <td>Generates the device header file. The name of the generated file is derived from the value of the tag \<device\<name> in the CMSIS-SVD file. 
    Refer to \refelem{device}.
    </td>
  </tr>
  <tr>
    <td> \-\-fields=struct </td>
    <td>Bit-field Structs</td>
    <td>Generates bit fields for each field description contained in the CMSIS-SVD input file. 
 Must be used in combination with <i>\-\-generate=header</i>. 
    </td>
  </tr>
  <tr>
    <td> \-\-fields=macro </td>
    <td>Bit-field Macros</td>
    <td>Generates position and mask C-Macros for each field description contained in the CMSIS-SVD input file. 
    Must be used in combination with <i>\-\-generate=header</i>. 
    </td>
  </tr>
  <tr>
    <td> \-\-fields=struct-ansic </td>
    <td>ANSI Bit-field Structs</td>
    <td>Generates MISRA-compliant structures for each bitfield. The generated code <b>is not CMSIS-compliant</b>!
    Must be used in combination with <i>\-\-generate=header</i>. 
    </td>
  </tr>
  <tr>
    <td> \-\-generate=partition </td>
    <td>Generate Partition file for Cortex-M Security Extensions (ARMv8M)</td>
    <td>Generates the device partition file. The name of the generated file is composed of <em>partition_</em> and the value of the device <em>\<name></em>
    (for example, <em>partition_CMSDK_ARMv8MBL.h</em>).
    Refer to \ref elem_device. The content of the file uses Configuration Wizard annotations and is derived 
    from the SAU-specific information of the \ref elem_sauRegionsConfig and the interrupts specified in the \ref elem_peripherals.</td>
  </tr>
</table>

Return Codes
-------------

\b SVDConv.exe returns the following codes:
\n
Code | Description             | Action
:---:|:------------------------|:--------------------
  0  | OK                      | No action required. Validation and conversion performed without errors.
  1  | WARNINGS                | Warnings should be checked an possibly removed. The header file is created and could be used.
  2  | ERRORS                  | Errors in the SVD description file. Important elements are missing and must be corrected.
  3  | Error in command line   | Check and correct the command line arguments.

<b>Examples</b> \n
-# Retrieve help information on screen.
   \code 
     SVDConv.exe 
   \endcode
   \n
-# Perform a consistency check by passing only the SVD file name. Errors and warnings are printed on screen. 
   \code 
     SVDConv.exe ARM_Example.svd 
   \endcode
   \n
   The result is printed on screen:
   \verbatim
   MVCM3110.svd(1688) : info
   <description> missing for value '2 : MODE2'
   MVCM3110.svd(1692) : info
   <description> missing for value '3 : MODE3'
   MVCM3110.svd(1696) : info
   <description> missing for value '4 : MODE4'
   Area of improvements:
   * Description contains 267 <fields> defined without associated <enumeratedValues>
   Found 0 Errors and 1 Warnings
   Return Code: 1 (WARNINGS)
   \endverbatim
   \n
-# Generate the header file. Performs a consistency check. Errors and warnings are printed on screen. 
   \code 
     SVDConv.exe ARM_Example.svd --generate=header
   \endcode
   \n
   Code snippet from the generated header file showing the structure for \b TIMER0.
   \n
   \include "ARM_ExampleT0.h"
   \n
-# Generate the header file containing bit fields. Performs a consistency check. Errors and warnings are printed on screen. 
   \code 
     SVDConv.exe ARM_Example.svd --generate=header --fields=struct
   \endcode
   \n
   Code snippet from the generated header file showing the structure for \b TIMER0.
   \n Compare to the code snippet above.
   \include "ARM_ExampleT0Struct.h"

*/


/* ************************************************************************************************ */
/**
\page svd_web_pg CMSIS-SVD Web Interface User Guide

The CMSIS Web Interface provides functionalities for downloading and managing the CMSIS-SVD files.
    - \subpage svd_web_public_pg - Users can download CMSIS-SVD files.
    - \subpage svd_web_restricted_pg - Silicon Vendors can manage their devices and associated CMSIS-SVD files.
    
In any case, the ARM web page requires login credentials to grant access to the content. 
    - Registration starts here: <a href="https://login.arm.com/register.php" target="_blank"><b>ARM Registration</b></a>.
*/


/* ************************************************************************************************ */
/**
\page svd_web_public_pg Public Download Area

Public access to the Device Database is provided from <a href="http://cmsis.arm.com" target="_blank">cmsis.arm.com</a>. For the public download of the CMSIS-SVD files of published devices it is mandatory to:
    - Be logged in on the ARM web site.
    - Have accepted a silicon vendor specific End Users License Agreement (EULA).

\section login_downl_sec Logging in
   - Use your credentials to <a href="https://login.arm.com/login.php" target="_blank"><b>Login</b></a>.

\section  open_downl_sec Opening the CMSIS-SVD Download page

   \image html Access_SVD_Vendor.png "Access Silicon Vendor Device Database"

   - Access the CMSIS webpage at <a href="http://cmsis.arm.com" target="_blank"><b>cmsis.arm.com</b></a>.
   - Select the "CMSIS-SVD" tab.
   - Click on a Silicon Vendor's name for getting redirected to the respective vendor device database.
 
 
\section accept_EULA_sec Accepting the Silicon Vendor's License terms
   On your first visit to a vendor database page you will be asked to review and accept the 
   vendor-specific "End User License Agreement" (EULA).
   If you do not accept the EULA, you will see the list of devices and associated CMSIS-SVD files,
   but you will not be able to download any of the files.
   Note, in case the EULA has changed, you will be asked to review and accept the EULA again.

\section  downl_downl_sec Downloading CMSIS-SVD files

   \image html CMSIS_SVD_Vendor_DD.png "Download Device Database Files"

   - Select one, multiple, or all devices from the table.
   - Click the "download" button.

   You will be asked to open or save the zip archive file containing the files.
   If you have selected multiple devices, the file \em contents.txt included in the archive will list the
   mapping between devices and CMSIS-SVD files. Multiple devices can share the same CMSIS-SVD file.
*/


/* ************************************************************************************************ */
/**
\page svd_web_restricted_pg Restricted Management Area

  Access to the CMSIS-SVD device database management system is restricted to:
    - Silicon Vendors.
    - Companies who have signed an agreement with ARM about using the CMSIS-SVD device database.
    - ARM Cortex-M based microcontroller devices.

\section sign_agreement_sec   Signing the agreement
   - The Silicon Vendor contacts the ARM sales representative or sends an email to cmsis@arm.com requesting 
   to contribute to the CMSIS-SVD Database. 
   - An agreement needs to be signed between the Silicon Vendor and ARM
   defining the terms of use and specifying the representatives authorized for managing the files and devices.
   - The login e-mail addresses for www.arm.com get listed in the contract. The representatives need to ensure that
   their login already exists. 
   - As part of exercising the contract the representatives will be given CMSIS-SVD Upload
   permissions in the system.

\section  login_mgmnt_dd_sec  Logging in
   - Use your credentials to <a href="https://login.arm.com/login.php" target="_blank"><b>Login</b></a>.

\section open_mgmnt_ss_sec Opening the CMSIS-SVD Device Database page

   \image html Access_SVD_DD_Manage.png "Management Access to Device Database"

   - Access the CMSIS web page at <a href="http://cmsis.arm.com" target="_blank"><b>cmsis.arm.com</b></a>.
   - Click the button "Device Database"
   \note  If you do not see this button, you are either not logged in or you have not been granted CMSIS-SVD Upload
   permissions.

   
\section manage_dd_entries_sec Managing the Device Database
   The database lists microcontroller devices and their associated CMSIS-SVD files and, optionally, resource files.
   Multiple devices may share the same CMSIS-SVD and the optional resource file. For this reason, files and devices are 
   managed separately. Files need to be uploaded and have to pass the check against the CMSIS-SVD Schema as well as the
   plausibility and consistency check by the SVDConv utility before they can be used to define a device. The SVDConv
   checking is scheduled. Therefore, it can take up to 15 minutes before the file status gets updated.

   \image html Manage_SVD_DD.png "Manage Device Database Entries" 

    - a) Manage Files
      - Add file: Select the CMSIS-SVD file and start the upload process. The schema check will run immediately
        after the file upload is complete. If the check fails the file will not be stored and you are asked to  
        upload a corrected file. The SVDConv check for this file is automatically scheduled and will take place
        within 15 minutes. The status of the file will be updated and reports errors and warnings in a text file
        that can be downloaded (click on error/warning respectively).
      - Delete file: Files can only be deleted if they are not associated with a device otherwise the system will
        list the devices the file is still associated with.
      - Replace file: Replace files allows you to update a file without the need to edit the device definition.

    - b) Manage Devices
      \n New devices can be added or existing devices can be edited.
      A device defines:
       - Name of device
       - Filename CMSIS-SVD
       - Filename Resource zip archive
       - Reviewer List
       - Publishing Date <br>
      A checkbox is in front of each device to enable and disable a device. A disabled device will not 
      show in the vendor-specific download area.
   
    - c) Review Devices
       \n Ask you reviewer for the login email address being used for the login on the ARM web. Add this email address
       into the field, one email address per line.
       You can add some text to the e-mail body however the email template already contains all relevant information
       like the device name as well as a link to the device database.

*/


/* ************************************************************************************************ */
/**
\page svd_Format_pg SVD Description (*.svd) Format

The CMSIS-SVD format is based on XML and was influenced by IP-XACT.
Due to the much wider scope and complexity of IP-XACT, it was decided to specify a separate 
format focused and tailored towards the description of the programmer's view of a device.

<strong>CMSIS-SVD XML Hierarchy</strong>

   \image html CMSIS_SVD_Schema_Gen.png "CMSIS-SVD Hierarchy Levels"

One CMSIS-SVD file contains the description of a single device. A device consists of a processor and at least
one peripheral. Each peripheral contains at least one register. A register may consist of one or more fields.
The range of values for a field may be further described with enumerated values.

- \subpage svd_xml_conventions_gr "File Conventions:"
Outlines the main conventions for writing an SVD description file.
\n\n
- \subpage svd_Example_pg 
Provides an example outlining the SVD XML structure.
\n\n
- \subpage elem_device "Device Level:"
The top level of a System View Description is the device. On this level, information is captured that 
is specific to the device as a whole. For example, the device name, description, or version. The minimal 
addressable unit as well as the bit-width of the data bus are required by the debugger to perform the
correct target accesses. \n
Default values for register attributes like register size, reset value, and access permissions can be set for the 
whole device on this level and are implicitly inherited by the lower levels of the description. If however specified
on a lower level, the default setting from a higher level will get overruled.
\n\n
- \subpage elem_cpu "CPU Level:"
The CPU section describes the processor included in the microcontroller device.
This section is mandatory if the SVD file is used to generate the device header file.
\n\n
- \subpage elem_peripherals "Peripherals Level:"
A peripheral is a named collection of registers. A peripheral is mapped to a defined <em>base address</em> within the 
device's address space. A peripheral allocates one or more exclusive address blocks relative to its base address, 
such that all described registers fit into the allocated address blocks. Allocated addresses without an associated
register description are automatically considered reserved. The peripheral can be assigned to a group of
peripherals and may be associated with one or more interrupts.
\n\n
- \subpage elem_registers "Registers Level:"
A register is a named, programmable resource that belongs to a peripheral. Registers are mapped to a defined address in
the address space of the device. An address is specified relative to the peripheral base address. 
The description of a register documents the purpose and function of the resource. A debugger requires information
about the permitted access to a resource as well as side effects triggered by read and write accesses respectively.
\n\n
- \subpage elem_fields "Fields Level:"
Registers may be partitioned into chunks of bits of distinct functionality. A chunk
is referred to as <em>field</em>. The field names within a single register must be unique.
Only architecturally defined fields shall be described. Any bits not being explicitly described are treated as reserved.
They are not displayed in the System Viewer and are padded in the bit fields of the device header file.
The case-insensitive field named <b>&quot;reserved&quot;</b> is treated as a keyword and each field with this name
is ignored.
\n\n
- \subpage elem_enumeratedValues "Enumerated Values Level:"
An enumeration maps an unsigned integer constant to a descriptive identifier and, optionally, to a description string.
Enumerations are used in C to enhance the readability of source code. Similarly, it can be used by debuggers to
provide more instructive information to the programmer, avoiding a lookup in the device documentation.
\n\n
- \subpage elem_special "Special Elements:"
Specific elements that occur in various other elements are described in this section.
\n\n
- <b>Vendor Extensions:</b>
The CMSIS-SVD format includes a section named \em vendorExtensions positioned after the closing tag \em peripherals.
This allows silicon vendors and tool partners to innovate and expand the description beyond
the current specification.


<b>Multiple Instantiation</b>

CMSIS-SVD supports the reuse of whole sections of the description. The attribute <em>derivedFrom</em> for
the peripheral-, register-, and field-section specifies the source of the section to be copied from.
Individual tags can be used to redefine specific elements within a copied section. 
In case the name of the description source is not unique, the name needs to be qualified hierarchically
until the element composite name becomes unique. Hierarchies 
are separated by a dot. For example, <em>\<peripheral name\>.\<register name\>.\<field name\></em>.

<b>Array of Elements</b>

A powerfull construct in data structures of the C programming language is the <em>array</em>. An 
array is a series of data elements of the same type selected via an index. CMSIS-SVD supports arrays
of \tagem{peripherals}, \tagem{cluster} and \tagem{register}.

<b>Peripheral Grouping</b>

Peripherals that provide similar functionality (Simple Timer, Complex Timer) can be grouped with the element <em>groupName</em>. 
All peripherals associated with the same group name are collectively listed under this group 
in the order they have been specified in the file. Collecting similar or related peripherals into 
peripheral groups helps structuring the list of peripherals in the debugger.

<b>Descriptions</b>

On each level, the tag <em>description</em> provides verbose information about 
the respective element. The description field plays an important part in improving the software 
development productivity as it gives instant access to information that otherwise would need to be looked up
in the device documentation.


*/

